%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 133 522 369 758
%%HiResBoundingBox: 133.000000 522.500000 368.500000 757.500000
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: rotary_flexible_beam_3DOF_breakdown_edit.dvi
%%CreationDate: Mon Jun 15 10:11:35 2015
%%PageOrder: Ascend
%%DocumentFonts: PazoMath-Italic URWPalladioL-Roma CMMI10
%%+ URWPalladioL-Ital PazoMath CMR10
%%DocumentPaperSizes: Letter
%%EndComments
% EPSF created by ps2eps 1.68
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips rotary_flexible_beam_3DOF_breakdown_edit.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.06.15:1011
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 781 2013-05-21 08:25:07Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro
%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro
%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 713 2012-10-16 14:25:00Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.03, 2012/10/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { 
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get 32 ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def
/psStringwidth /stringwidth load def
/psShow /show load def
%/stringwidth{ rightTrim psStringwidth } bind def
%/show { rightTrim psShow } bind def
%-----------------------------------------------------------------------------%
% END pst-tools.pro
%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end
%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def
%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end
%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end
%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end
%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43EDDF7CB0C5D3E3F2B9043D33654BDE23221D16CABE4D559575AC8D01281
379FC2AD33242EDDECAABC38D94B5261F13375D63207B3EEBFE27697FF9C6A98
08A260CE1264FC647AA4F80E0A2EC2EEF124A38C35F829B03305C61CF9F26DAA
1BC0457D1C7FA65DF52C453AA851A791E6993CB4BC0C0A449D6F0C01D2217330
5336C0A329988AA21A0EAC50B8762A97226A8570C956800D2BDA5431EA9CA3FB
64186466DA95E5EB4B417A2E43A627BF3874A2E20F381285D1D430D5C2711222
7387EA17E909D6BE064690A19C443A90C245E50B144E2C2143F4D5B3AA1A20E4
FAFC09B269E6CB0B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD551275F07B3EDF9ECA423C805F1554FD4B852061899B5682B5543
34A8AA2B7F8A20379ABE314685A1B6CAC2A5F272C6D73966499C3F42FAC164C1
01B62EF23D5B983D57F58E6E75000536FE41CB7C653067E71FB417926EE7E01E
C9602D4654DEB38E8E944CA1005281F055269581F400113A3491F5E07CBA5CA3
E34B94447EAD6A3BE038A7FE70CE5AA279EBB065478C5A8B6C50AD39D3BDE3E4
16E13D6B23272517D28E9E093AE0A618276284CF0B0724C84017A881CA94A329
EDE96719EEDE81E652B0347C8D04A059F61FB93A488C16F8DBFEF20DFC415BA8
8A8AF0C5D5B18E333F90FC9653E80422F5B5B56F6D2EDDC1A7C76EF77C6E7407
C9965C87B89B8C1DB7526B19F7F0C20B11FDB0F2C840430507B2814046F5F211
E16EACD389622F0C6AA6E0C4F7FD2D7D2ED6170CD24E71476A3EFA631A9F46F8
96029B671A1993426378241B3230E538EA282809AFD4D223FF9A05D570F07571
F1BF3F29CDF026EB77839530DFDD8B9C9935E7B787F601DADCC81385EBE6A64A
A094FE3697A275D68B3A674D43404E33F99D2FF36D76863F16000383F5188E09
A9E1B8C023F7E0886A234A79DA8062B02744D9E08DCA6D6241D713E3A067F537
0037C7CA528CB3B9A5AC0245FB4B4704B2B8031F7626389BD3E392CFB2EEDE17
3452C0642747AFE0AB1944BDDAE1FB609F621928A3A51EEF532684926CC74252
718CC5E605CD6C3C5A46E851536CDDCB082A18B1EF60A4D042BB742B4C08754D
9F00C2C9FE593280E59E14C1F64C508C3C81BC1871607DB02675B3FAB479D9B1
66D442B6640CE02C62C4CE72A35BF97CCEB0DA2442304FF353060D4326034A5C
D9EC8F749D0ECE7390AFEB6F7F9E6309A71C82A089CD2DF10E455880B7D6CA53
27DB81FAFE2021B109D7DC8DDB8E393D99DBA4A742B4993D2CD41C77916F09CA
F327C7D12C0B4926CCB9B73A8847B4EC479380641C1F340BC8FB22495D38BC8D
05DABA5643B0356EBBF5032B66BA8B04EEDA1263577D0D75215866236E5FC6C2
84B502BB2D09F2A0667A4E0B5D6BC5439622D0710C56021627E46A9E6313BAEB
3A19493375F93917170A43C3A1A314692BED62E0FCE27467A1D65E0577F47049
8B78FD260042AFB4E19A95C7D9B71C7D637420B70C1893A1C09209777C049511
6BCB7D33A77E6558BCBF37952609160715F06663CCA773B05D32160590FD4814
C5B86C38CF5F8E1554E4B6108B1BCFB5C7E9E70F8EA65E9A006F8EDBEB4D0BAF
47300B80C3F944CF3C1D8CED9656B074B08F2CD31FC681245C724A8E754BD882
5ACFCC6B085FA277618A1FBD9B828B8E5DDE11737D6B548B9CD05F0909FDFF1D
B7D89D00AB1F14DCCC8BCDD33756619AF59ACB9D17A3ABEAA6C652186D640A3D
893C2BD21FB9293BD39BDB93858819131F3644463D49DBB6803FD753A9E42699
2ED6BC8BEFEEAD4ADA9C849952BCA75DA0B435D00A5820BD65ED041016543C56
3E6EEB73BA022089A4C47ECF01BC0546393131E11D8F99B54AD573C0386EF93C
796E4644E666666E95FE31EF0F8DEB63E295E8826BF920C8FEAE3B26BC8C7F28
0053479A3A8234D93B303EDBBE9C97735C2D15B7F374D259C8221EF16504D11B
5F35E83F0D2E546D97F1F463EDD0A9C0118790E5780C0AC27A05B20A31B2C698
D1CBEE55968EEEBDAB9195ACC646A3CA56C3F3561B1CA13FDB336BD4F041E9FE
46C75BA73ACCDFFD0665DDC72FE8375C91FBD9035841767258BF8D4C75CDEC3D
8826E86802721D37A9F1AEDF7C92502B42313A0F3177B83C5CC1D9C87E1F9887
01ADD7AF25EFDE2D57D0AC1341F032BCBA162134FC3DADB6FA5CEABC55ED2D98
DA057A876FB35F46EFA6A949A75DA7C9F352DFF83B4D7FCB6B79C54E4F1776B7
82CB46CACA370AE364B05486B6A1E5378A10FB3CFE695C7908EED2FF28FF4823
4265B4759B50D24BD711DAC5557757E99C50B78FAC6A62D7CE3CED36060BBA25
43BCC444B1D6E9C29C2E65C25A7376AB0951A98F6689070C960691FCAC3F3D01
8449DBD45BD173A06B84C2EA6184F1F1088A69A2B74058822221B090CCB46C0A
8E75AA510FF811AFF97366C6142BCE4473932308A1D1CA91DABECFB41C6DB983
ED839187D445CA03234AD05E283005D97035874D2B9AFD4D3F29B4B1E6EDE309
80D2278C7302A34A4F508E05E8C908C46B93419B9CC4C9DD7FC9563CE02E9DC0
8B593F7487CB390BE16559C7197DD01B0793031FC9D38B8E7970871E4B60DA0C
91684979154D98437D6BBE4C8EEC74B6D9BB7D68BD7DC79C5E98BD38B14F7FC7
DFABB3BF569214525BD93A305FC549F4D79F4BDE53501E2ED5A81D91A826F9FD
BABB8BF813CB9DB27CB44AA47AA0D4E648240B184867B579F69E34040E2AFF50
8CE7AF4B0D544E7BC7A3A424ACFE020F88E6652100EEAD11886F604C8B4F6FEB
FD1A492C418E90A879E70C1FE775325A6F5EBA4B243FC3A0CAE847B3AD58CBE7
B8C5C86283EB4294B5C5D6DB92F2C0584F2ED652E4CF3C7E37B2DB7576BE56D5
B8C597A7E175B5B422414744779BD6DC5B176BC83CB7D22D504C13E3B3CEC8F2
FA39486353362DFBB5FAD6BC8BEDDD96595D60F3C71202EFBB2398DBFDC7B5E9
2735B8A7D7C32900BD6D133FE50034D245DEB1F697D86AAE5286A0EAA15D5605
01A4A39A25B0AEE932D20D9A5B4779DFFAD7B3E5D447023D643BE81E99918B82
D8BBDB1DCFE65325453720F02A01AD3C7A4D01199AFC3C88B0E2AB5FE014A843
7745108D99FDB3784C6366C4A1EB39506A273761A898F69A3E73106A35F92D8D
A29782A1875C6C8E74B0C86C0D32EBE03FD28732CB57F2E95555F4EBC6F97D18
7D7F76FE1F5F5E1CE7CDCEE753A4F34FEA0B2C6B2E0B3D10C2AD77FA9B4CA05C
EA57E184293362DFBD0B5D90AF2448C3434BACCE7484B9F8E71428A6451D7BCB
8B7858CB08DA0EE60EECA10F8CE90CDCE6720DA57529689C2B50A79FBA651804
B7ADA8FF0757E1E1B9D9BA48E3A3C6121734E6AD6B29C94491A94CFA9B4380D3
2A7A8F0B3D88BBBFA3DD28BAFAEF400F21A35667DC6205044B3455DDB6250BAD
A65F839BB6CBAC21C9507357B0C374459CD6AAC616784D91B39AD85200341B4B
33127E9AD8A86A8B94810EBC9C75D95160E58826E83C5AB759D8E9647AA14B3C
6CBD50988936ADCCB5EECAF200E1F89666805C1B3331DFA06E332B681A450A29
57916CC7BB0C5CCC51B52BE00F21532431D428B1076EF38DF09636D888853073
DAEE9D88B75EE46A48E9C4D49E716E828DB7B0634825CF63C13B40CE21656E37
A0FCB6836AAAC07E541A994DB2A24969306D9A13605DDFB9E8B0A82F4E30F3C8
3397338DE5C961B3AA70DA22E24F5D5F7DF0EE61C7A625298A03B9BADC361256
A391A3F0C48F7BED29B82971FFB283B1F17EF142DD5483632D2FCFF856FA5F42
39F26C8F3E865E32C901F01836AFE522359CCE25CBA7A4BD64E997B6F7BEF0C5
2D3AA92ECEF357BCE6C37FD374100BE0A678C8D5CDD137AA9D691A252489D3D1
F1EB2FBA73E5A675DB0EC1B960B494D65E6CBCB27417EC20652A05A5A2E61C71
8232391934FAB8940B083857A32806C77BAF195FC2490E6BF389F497CA5952B3
E4AE15C23A716FB75183EC64E89DF061AADD4FE877168A9FE25EE8922A649BF5
A1B3C20019A6B6662261B2207DA63CF2AB781F7D6201B067165272F7D45CCB8A
5FAC1938F398AA182DE8D3BE3E79B55166CCEB0C62DB8792692B616DA0A3C366
BB48BD0B9011FFAA925341C7AA30DBB60CA6455A9B14F5F2E118A4D752E623E1
6130070CE54B0FF347EA099B3D2BD411FB9BA4C621F23724D73B1079F7FA036E
38ACE400F6B71D871C67F70A2572B1FEE2E0E999C601D91D0B5A2CE1E2C033D0
CBB3BF6270622EEEE0025EF426DE53C20BBEA11B7521FAD2EA53AB06C46134B0
9B4BD7037A698BEC695D0E254EE44384CDBF724CDF87195CB95F59DBDB978548
9E1FA9D96C57DC4B7603038D6E181399F973FD9B3746D983B0BB9E1675AA41B9
F6713E46D6F6DF1DB8ADD7E6A17351F41CCDDB48903150D0969EE03FE1F01FCC
C7F5399762D1BC994E94B6179B1A7B60DD44E350E3CD021EF8E51C69EEE25F89
C795931778A9D90CA5E3B3211E20F739789086EA4BE455FC5FFFA51F302D8BD8
AF3E5EB9BC7BE18F5EB7A440C673D6251517FFAF5343B6D1D2491E61E60409D7
E5B7D4980F2C2D1A3510973983297A8BA83B0BAF12EF2385A7F49B1E345F96F6
197061B7E0724EBD5B2D76FEAADC98EA7FD3DC8C6F982A0D58ACB2AB0B6D52C9
A745F440BE173AB90881F03249F8460726FADC19D133E00109DA1B41388F31E3
8BA1E697B5E0C1A47544BC424675437C06B83385AC9491935041BFD81A41FC06
F13243AC37DBAFCE535CA3B8BD9670DAA6A31F83FCECD36411C734E04D89CFFA
35B8F44BA742A563F59EC51E1B8467EF133CF0D76680917F879787FD53C335FC
025A69D2636256C0E934F6A017E057180A692C03E4F4098C746D99066929DDEA
D48EE974604F8CA2E4FB12D9EB4B069E4864F2F25010ED963902C6FDC3BAB274
7CFD61EFD84E2B2031CCD4ACBE8B29281677246375371DD0822365122614D34F
433C877462BB83B29E26BC8150AECF9FCBE755284DB5E31F2E1AC724A97AC491
21CCE324DBD535B59E709861E50EA63860BCBD474052CFB23C52EDD82FA390D1
1A33F2D53EE26B72A1FD4FC7D84EFD9EC148AF4231EB8D72ADB12A138E27D5CB
59562E235D984FA314E9F0071AD677415B47CD6A5B2ED1DC992985FB8180AE8F
7D514F84F04C1FA4F82917FFE55B95DAF92B1634FF5D228C6B3410D38C0A4279
D2D3A974D881D5B012E7F168762003A8E18D857FA53278E89B2342C61028F8B1
EA0111EA3F95CC8B92CF5D8BBA4D0924BFE28291C3C1D17D025E721C68030BC9
03EF32B5B1750C7067E120376CAC5544A19A1E743983B8186BEE79219543A3A2
A7C103353CD602C110417CEF6DCDA7A78933785AB1B4B242457299D7EAD47338
061277E7258DC609471707916FA6BC7C676C71176AE793B6508CF9AFA3B9968D
41E1A8E6A0BF1DB857B9446E61EFE066B665ED573FF8DF58E7F7AAE4A9D1779A
740283ECCC84FD2D4F206F7D5E29AD57AF9DCF94E337151E223DFD1DB6A72890
DA790C53ED5A47094B3B616A85DC383FC04AE4E2BB896A5523DDFE93E2E121F6
712CCE768F86307355019F0A88C9ACF85635586CFC4AB1AFFDF878BF689865C0
A40084D5847EECADCE4A931A7E17C77B2B8FAA49B72E04F5BECE25AC9871212B
538C5E92569E52DDFB43FC3139F69E53F65056B34A30AA5B8BF88B41EF37A9A1
4F47DD5EEA088DE13EA17AE765F193D81FFA11EFC8665B293082DD7583FE4BC0
A3A30649486C002BFB9868AFCD830827DC7CF82CB2855CF7DF22DDF1E1A16740
AF1D70B76BEC8B4328E0A4E3F3C0B6861BC85CEEC23A0CA7D30148E8DD6A4796
2ADF982F4D75CD1EFF8F9ECC68EAD383F0A06A831C9787AA839C3F3A779C25E2
709855D2DD8826DE5F3D9D3E3E559A5B4C54819A8327385BDB9C82016E65448A
0216187B5C6943D30DC7E71CA5DE4E27635DED1DF70DC49A872AACAEC72AE04E
2919848D8A38B39B256CE98B71E94A2BD932F96E9D5D5FCA1BDD6BDCFDB4B56E
6D899A4F43A877A11A0C4CC271DFDB87A736A0F4DAF838CAD756DDF3449AB4E3
1DE7681BB517CDA22ADAA7B00B530D45FF5348EF403EE160A67E06579BB8A42A
49B5D6EE9FDEFAECB28CB93A08304F2E56424E547CF0F21D9FD8A499BDDD3AF5
BFE86A48E9D294283256AE6B598F27C8E05C91275179EFE509CD3D7233008D73
251F19C13C5AAE79A403BE35DBEF393BEAF5890F1F5EC43C4A0ED5B7B75876CA
21F0BDFB2AEBFD0618B2DC02328537282704578AF0E911A3B4F373483A445C6D
1918B1279812F6A326BAA8947A7D4CB271BB865FE162F2046288A25DDC8F6A09
22E24B270D46ED0B658B1D2EC819861EC36EBF5A75BEC8F6DD5F6E6843964C45
B67D81BA099C1328B900D04C4B99653EC00AF2D8AE8F680D6AA0AF094346C06A
F01FF1D4784AD33491DBFB17AA6A483E62BD66F51E58627D5E2622D22B75FE01
501A8E7982D76B5F3E725306177D891088643D903CB61F15D3F92CA2859BB607
B8D6E267243EFD320E2E52173E513BD9AC1EC86EAE85CBA7D0FCFEE888CC7FFD
EFCBD57372571087A93F8287DAB64850A522D33B09929C00B48C2CF4EC016371
9BAE108F344E5F0CF9DB294762537A84DE04C8001DDA345FB5F045225C94BB56
42ACBB24B738DEB7E436583EDB5A6B9BC246FD9A961E1C022F086619A7624829
60E68DD0C205ACA4DA8D65B8D22AB04A724D6D7E17AF8E77032F3460D62BA3D1
9D16CF320697691CA69CA1A46C024663F022F165CCC11FBC541426DF0A3E8703
B5FD8AD1D683777C41FDDCCA76F215DEC7A6E4B61DC4818228C2F96D36242E79
EA81FCF0C17726479FB100F52D05357987B2638553A46D8FEF42E18ADFA0C28D
0A6BFAEF62D92CC6A6BC4FAB1424E7DB080C4829CBF38FFC133E2C9E43D2BF75
9505E533FB823949830F0CCA08D642BF21112E83DE797647768F4D7FA40336D4
C1C164BF857FBFD78C902403D7562D042DB975E5FEFE29AB217152BAC956EB8C
D2CCF25A04DBFA79692F213E2BE3E179BE8631083E688D3AF14FADF9C239339B
3C05E1464BA146A5284F6578BC7E475C56DABAD1CC8A0B237F5887A65BDA3795
A2D343D5DB40B69F81A073749A0B6D7A28536D198CC10349333FF75AE460B3DD
D817C6A690881586881C1A947B9CB05124C91627F49E83279848E23D75E9C556
107488ECC9A1179A19262C2F1EBD6DFCCE21EC7F4C4283C233C8744FD510A328
4E414846C1EA3439F9B77CCF6CBA0C4C7BC4AC826068FFE4A1B855127787CF33
7A38ED4DA7DDEEDC8DB5C3D7AB0C000F828A470B3FA093080F61C6C5AF47EACE
EAAE11AAED2099A89866321BC4EFE882A99F98F1444028A6B26FDBB0AE1FC2B3
716CD9D0A6B71F643512993DEBB72204B66A6F001B92DAB29B267417264694BD
AD9D3D7DC91E853043F2D673689D34CB51DE77500F0EFE22651EF2AAB4CEF0DB
E729E1E9C807D4222DB031074F2F3C5E18B3D398B6F41DAA0D681D605D32676C
5858E9D4D3A609E11FB9513B8FBC8E3A51D5CF8464AAEF26E3BAD7AA1032BF36
F0A4390D72C15843D8756474FD5E7A2A0068866287E199E49AA8D203C1D7714A
9B4998819580E5B02D36AD0D300A74A60ECF31DDBD51C914DDF0E3330146F527
C20A7150481FF3126BAE5309893814BA28263EB863D5E5C42252937B4F435F09
8D34636051CC4D410114D2D9F9ACD059980738286154A2979CA66F3375B5C3CC
B99FF8FB2A3DE44FC54129B7DF0DBAD52797DDE4632223653546508873053D3C
276EE8F42999EFB7B067D0189C6EBFE300417F40FEB12D4C3841165C146487A1
EE63AE50CDBF73203755E9379E2BEC7CBB000D31E6FC60F8C796A016D2BCCF10
11F3116FC6FE19D36E05FED83093D882A6C95FAFF08D1E6B4FD8F0BCE6F1057C
38238DA9F5DF49A0F5AAC1BC1AEB6CDA7631A6E186E89D20B9916C0ECD3F729B
6026E8C06C8BE015901D92305B140C4CAA9DC19624D22E1F10747C1DCD1B5A94
208B3FC6F7A6DE943E779932DA0303E1B06F6C12126D76AB8A27F42FC0DCB4B5
551FA7FC97FEA87617A27763AE228525EA13DF6AB6790FBF140E2E624C19D6B4
B3636398EFBBC92E05A36947A0EC71D4169ECC26A185CCEF8B00D1A24F3DEFB0
27B791FC0398466B4A27A72F0FC69B3106F6FC30E9335F1EDA663592B170F630
3BE59B29766FE954E0D7B01D3DD79B7CCB6196341BF42F6A9DCD31BB4D5B5EB7
C50A72511E4411918E8926375E5B583A29BB28ECC41A6A0A5E89F8456F0B4D1E
DD757321B0BC54DC7C9A98BDDCCADA7925C7CD9858D1B94725F7FCF64AF87979
032558A44422DCCFCF9D65C4641C553CBD0FA6D9A4D7B769B4D0FCCC3A881638
FF253FF56D4264F1DE34221EDBCB2339B3D8244B73F4B15ECB082C195EB64433
67DB5B7E9C0A9CFF574DD2E758CF8BB6E919816C4E9A13840D51B564B769CB33
6440CC6040FD9B804FA144365DC87E63BADE1A9212BDB101703F912E87DDE05F
2D9DFAE9A0D70CB05C0AAC0D6FD83C045B1761951B6CE47CF745E42FF729AD3B
90B0FF585B561BD3EEEA33FE409699E7D1DA164BC2E6520CEF9DFC0B904C41B4
5F7BFD4C8781E8F300C971EBCCBB533F9AEBD2DD701CB7C554A24F4811AD184C
82451518BE3148C7B24EACC5E31FFC1ABFB1E161F18295BFA3B2CFE3F5FE73B7
D1E30D3CACA6F277009F6952BC47860B1D78134BC7E45CD5FDC164EA85F558DA
72B606A8923D76642A148A9245DA7EEB851DBA2D0A42A3D7C6BB3F12CB531F48
6498B92E1BDC97B562D369E669300402E5DB75B1E8E73CD2C17E0C5E0CD89692
9A8F9CE53FA3363452A806E6B39EC952DF960918D2DF8E40103F728D853C415B
8584AD015374BE3B915DC13415D28DAFF0B369FB7E9D98E8B5D0D1B50032976D
8A51AA8655F1E58778C6B2BD725C8358E8C771A38E3923EAABABA7F34C5C1E2C
5AEB68868540E94FBC433A644A7BF8EB8B6C8928F25649E2E9A20EC16B36E9D3
3A609AE58B2649D665BD05A27ABD419C60976FA68760894EFCC48455F5C5DA6A
392FA409867C4600C896289A9A434DD5CBDEEA71F14627F3A7718B8FB8EBD3F8
990F820147B9CDDC493133DAF8292807E671CFC5481056CDC649D036DA388465
D1E80C853B5C7E05E9824B306613E42ACD9C0C1E624A4A7F4114EDEF4D376693
092414F780362916BECF176E7ECFF5999223121EB26280C95453286807DFBC49
DB737197486512F4894875BBED2AB3C68B3A496CBEE23482D0D1ED8D2FF063CD
0CCE39ADCD0D37E6F42813F4F5A3A7DAFBC2150D9893C2B29F8C131CC7900AD9
D5DF484DECF5D214E62B45283C15074499ECB126B162FA9AC78AD07A56426226
45A598B9C2716B5D9B47F77DF1C2204114892F818D2CB77481CC6F72492D6232
C015AB7188FFBCE3AF1AF4C2F996E1AB49BB902618C6D2AD6B30AB0939180635
C0F2B3D90B1444E654491898A6FA5694ADBA674282B6C84DF468BE421CC531EA
E4B3CD2473C979D11C11BEA2892BF67E9FDF6FF3A0842C93510237B819027F63
1D332A9B93C6D340C9839D58A365195647F6BCB28B5B1DCEB7C23BCF60F05E76
FDB386C31B35A7C9DFC6A9889547F68E0AE3487EDE0A148F2D79715A87199138
664F311AAAF0EB95F77B140C4E1569529D433336951DE4EE9BAAA1D011C03BFC
4D497466C7F09105A287FB8C8D3080A2F3693132B7AE3689C9C0F4792251E945
D9890F48F62D6E531DB9D7ECA48701B5D4511FF86644AE56F46394B8BE7A61DD
EA5F4798BFFA9FEB261508B0D522AABF5392153B485B551B90E4C1C49EF40DFE
1973DC8F7B8C17AA830183FA16E59C55091C22CCF313C333CBF22FD743083855
DEBAB6116D53BF50D681063EA6A439F193E4F1DC9D9D3EE03908AF2CFD2E4908
981F51AC4E66A3F8212A2EA8F8E14A7959731A74DC4B215D7EC095EBE86A3CBF
5A8331F31E58AF3A560C46F0F9A0A0E9FA210EE25E5F205EED4FC60F6AE7BF7B
E43085E59A7E898219842DBC8839ECEE402AC2178EB9AC1FC6A01EB4A52E159C
BB7AD3A91F08C3D5C4E2B69BD4A2C8A33AEBAFCB05DD8929932B50A79FBA6518
04B7ADA8FF0757E1E1B9D9BA4B0F47AEB22F4E871755911D8FAEA73E35EB7835
FA1C6CF353D4496A5AE7A4F756E3B44D61CF6D96EF68407F312D45552034256E
EFE521828F2729A2542C2F3E67AB8D650DF1B3DA27604A975C2DB6FC1854457C
67C54DC08C81D7C123BA1476C89AE2557822590FF52D27A6D375B667B120AD06
744BAE758B478EFE5CBBAB5138D6E4ABA80FEB46346EC80B6171119377D458D1
93B1F81EA3BB767D5E2AB80B008837ED8F6D3B41CC803C6B5EECC114ABAAA970
CBF14ADC348B1150E34E14099F26B4DAF2B05730540C6C6AF3F1381F095C03F9
18532C41F7B8A1A551D749F6FCAF365D4B5550BBD8EA3D1619BCE500F78A25F6
6EC1D7512AB6E16FAB0A633BD4BC90EBEBBBAAEA64FF6F7DD18C92268958F56A
3CDB6D7D866B6DECEFD6F3CC87D834EE24B62FFAB0707D077B760CCBBAA33C6B
6D0AA0920E0BDE7C64BBC23EA554AAC9BA95BA57603A88861408D4F4E1E2CC64
E1E88EDE9F237ADA30D3C0E24E719A68D1748639DAD902F9BFE6EE602DCBF09A
3BCBD7602C6161D512A8BBEF81030F8F05464D998B930B8270BFBAA71A1D06D2
FA9ED0B02168B32F6CC0FE765F2AFDBAE3F54472863A43FD9895C72B839A3617
1E129FD3DB8FD4CE52268155E00A81DD292E4CBBF03DE6C212FBDA79D6D91FD3
F5BC32979FF087E9104E689591F1B526762DF61DD6435FC6A7C2B91B672FA23D
9F875C001E76ED41253CDBCF7C83ACD62213BF6D8A8C77FE8B2061655024146F
5C00862A548DE99D8304BBE985CB6DC92F99088221947F2328348B3A1D3B71F2
6F2F83281B0E9F6BDEE522813F1B3849E1959EBF034CD9229C35435A18684A68
69E007B1E80EB405BA27F77FD35747A755A5367DBB13A6E9E6E6CDDBA5161B65
20ECC043475A0FD680DDA55368BD342E796FF285F008E8815DC181F7BCB30C27
745C11860F21BA6B908524F6649B5987967B344ED58A2EE15449E1C84AE6E32B
58AB6BA4BA2FBB5CA6D2DE2B203BA5639A90E92E0363F0B5A7A6942C8552F4AD
90CAC82769056586CEC7F8ED7C623E5517726F6028288B8CF8756FFD5A0255AE
EBDDD9EF6F7B47172D7B52B09828023C348B6E89C99A848AAAF1BD143560B559
176CAF28B1DC8C8D431C0106DED8EE779C6561659DE55298253B0DC9747225B8
4138B959B5DD39FAF86A1DBA1C615E69E79616A4F4719E66EE3C64292C209A83
2AF504B1BCEFB1426E92487DC47818C92555B5FA22B8E2D726EBDC077F524095
E12032984302EB1804481D62AE03D55487148631D87A23326CD8E2332276F322
83CF0F7169EE52BD767BB9B052B449B2C401E18976E5F8628E21B2098787716E
948C61E37748CE08A60064CB42F4B5DD688729F3F1A037C738C6F23CF4F34A9C
ED84942968B40D4D871D7AAC3E86043F15602A346C1667DC625491A42A8BF5D9
3FD3FDA8306BA583EC24398D56F651C57BA87A22D823DE5C78FFA884A62B214E
A0562234E8B0AAB742B140E061C368E357E57BBF3DDB5814624FAA4BF2B5FCA3
C7180678F1E6945F424F38DD9D06240C3A8203650FCF72309950D176CFAA1D15
5312586A9ADC136D92186C11014ECC4B9962A89661F28AA0C13CDA7AD331944E
3F83D723FB557CBC51ED0027A70B19A0039DEF9FD4E5C496F07CC74AD17A93D3
206EF4D481A294B8874E021F29E024544DC6092E53F9278360F779C393C0DA4D
2EC2DF16622A25D09BCF23428602EEDBE7884330822AB776EE4FD2B2530D9058
FA34E89ABAA7573EC539596202D19CB9FBD855ABBC165C0B83FF84AEC5399B13
EC4DDB32F9338F9912E1EBF8CC1347B4D4AD31E7B1B93CB1A2DB181104E45B6F
7A583C80D645F0DA3A2D5C32B10B323B1C2479BC6103046F783B09E005AA0E74
F64932941C3AF51D4257BFC547B7CAFFD71B700F08371960632CD343F356F2EE
6C976C49638D0482BF77FE265BFF0B3F7A9837DCFF74605CA643E16CA8149054
21BD16CBA6C0858B7E64481B4479C7392DB84E20022321505CB0CEE9FBFDDD63
E7EE5CE75D312F5B055A9364EC44A98D5872E8F697B074127A88061E31ADC961
CA7434A5C6256BD5EAEE33FC408260AF658465FE40CB913E39C859BFAB7B4F56
02E9E3B9029AA4C97A3EA3651851135E4F822EC6109E13F6CAA622B443BA7EC7
F18E90B6F0FEBED5096ACF3DD244C32A9EB543CB4CF1582B5EDBE1C2D2538E85
8BFE68DDB61B2D4B9DB8D56D49BC6A36F4664A3DE9439F4D8DD66A455EA7FD1E
B08252DEC98F89AF22A2CDB8CBAE6A2D84240FBD48DA484AAD082484B384AA02
8FC067F81D3FC5E204E06DCB2A66C8C5F48B1949C72088EED64E45DD9874A615
23D23195AC27F5EA1159468BBAC06BAC2D60811DE69271977AF7E4FFD6166925
7C195560586BB567183114C9895464ADC2E015524EFC3A90BBF54D37F9043C12
A5F4383312A7E6C7DA719845AA9C4BA8AC40C1E24DD4CABD064949F624F44CA3
DC5AC833C4B0091084660574D12B0EADD3BD29E35974365DF26E91230B193B4B
81FF539DEDB60DA717D14570264C5098160CC644902847637FBD2E1DA0599467
133F4EDB0BC61B5534D7D828A053B63A3FD4CB68CBCA550B19A610AC87D4D4B0
A80797BE2BC7CA32B455C4DA6C6C6E5D31AD786B21460F0E8C1C2FB569BD4051
0B92B101B01D5D3349B6F868364FA6DEBEFB280385D50C077AEB1B5A03B7A717
E254192D14BBA2CED7AE52D15092972B8F4DFD4FCDAA1BB09720C0DDDDF3EFAB
051A5C0DD81263674352579D638370B1617A1E758CB8F499AA1FBF4DAA942280
A326B0C4356B774DAE57D209909CB9393085DFFD5EBEEF83D696C0FA27B86904
477A22C14238BD08C428FCE711882EFEBB8E278432D6E9D53AD860D15F044DD7
D1A1FB182766565B59F1021509A8EEF538539F4D60FBC4C2709D6B1A188777C0
EF5D26165771C93A7BA382A902F008AB5B92AC6BF1104B2CC45643185BB22DD0
43ECB0CDB6902BD6E9495DAE0A3681F6951CDD7FE1741043EB837C589B4CEFAC
955BD04F4BCB9D5BB424541F3D309AC650FEAF3BDDA56769149F2A1B8CA536FC
A917DDA7F6DE559E13D64772A5BF9D2ED8069FB7C30CB15EE37DC5F4533724D7
85C22C645809C6B3B4BEE43E670FFE852DE1E90FFE9325EB3E9F8552091831D9
152DECCD5B627839105D27A32EB653BD28B7D7315237A82AD452957EFA5E03C8
ABED884854242913773A08A700B9E307AF675A9D995F60BF5F23A32165579214
04D339047D1883C61EF0334681CCACC5D024F39309DDAE70B009DA3A579EC35F
7F38C9A80F29BB2E6146AA109B8DFFF44A5390F0F2133D75491624029ADD4A92
09DE8A4F3921DC1BCC1BC10458CA6C4395659B0DB6B612C151544BFE9960CCFF
32A7372348A2255187480B1244D999AC972155C5F01065BCB57954C4CBDA5EA0
0200AF104B2D1720BC5258423E05CA315FDB3A01C80C7E195EED75B2C1A2E661
4F5F7938E48FAED4521F35DD3F4362638068EB99E2C27DE59DBA466619D0E4D5
1811B51218921FD978D545C10A7D1A6EC8BDB8552BA01AEEBB035AFF60E4ED95
FA18F5F540FB5DF08B8EBEFE82546AFD7C818322A1D5E904EB235BA0C57D9AE9
EC40A4A7A9353078D554F11C51DEA1B59FDB57846C7C25504983813DD7F2C4C2
EA9719622F5FB9B9EFBCE892D39665544E4CAFB4F086717637F4F62A76A5E20D
F4A4B6AC2A5E1D5DDE76D72AD520B2A3B6901BFF9E52C9104CB1727260F31897
AEE338BD503B67628C17514FCEF12DD13F2ADE89A4A385A23556967AFD768AD6
66DFC59080B2B8DB1F049AAD00EF900EBDEFFA06936DDCBA4011789AB93F4773
10846AA9B40B6D49102059E848624F9D058F8D837036E3484F304F818F4A1009
E27147CB1D5248A6C9EAE2C84BFA04443334F203AA3FE542DD683D3736DAAABF
9D3BDAB6D14162DCC6E82FCA3A0D44585E55AF7C7CFD0AD31DB3EB58F4B42C47
F40CE1C8EB145A9CA21669FE7C2844BF832E4DFABD8F909DB63A86DF21FE3E83
493BFD2F9B95CC7FD11D8A65A2B2A2399C57BEB294D60A07AA19658943298CC1
6A953DB18C692500ACFAE3DD2343C385C5EAC6A75E01F07169A9A9A91CD2FA77
87BA751A0DCF886DD87A925FD7F6BA8D3CC0210B09C8F17B6DC9F661D5347FD5
D1DE5CDD325C330122679AA802E22F881591DCD661E776A7F4B8D54285057FFF
9B62F907998A21C8584161DE92D2CAC9F7E2C461C054EA8037C2A1C24EF5369A
D8E4308A8813106BFF42B91286DB4AB32DB1BB2FF1BDDC1708F0D3F8E1D459B2
9DD276172A5E8D92A1ACF4B286C5430CF379E657FF945CBAA9A80463FF46D1E5
93050BDA7D52FFFD69F7E95E07DF047A90A48E8EE15D61C5F2CF16AC8C3AA841
12F9B7B11C51E665B0B993F9F3623D51548E25A933FB1F6ED6AD76380E294C13
5F687325954D920EFA11E095B67EA8A97DA69AA45B565A7700B5A2F6A57CCD19
D7F8FAF117C6D5E60D5D0C1B18685EA3766326222286ED58083CC21839723D9F
E113C3EA50B8009493923375C4A4FC66546165E0D36B6AAFFA6C5826C82CA72B
F6C25E737066229312A088A578E4C171A7DE4FA2BC17BCDDD06C295AF45BA23D
31A5AB27CD978363DD00E850F7CDD3B80648D9CF2CD36C61766A60D4A076E549
42E07D296B12AB78ECBB15DB7F28F3BE5BB94BCED76B1B488EF308D3FDD226C9
514A8A5544B6DD2331CF44C27D51A9BCBF1775DC5873B5BD784064E033163B42
C975E3011726C79D0CF07A2578032E34A3AE1F94CA2EC5BAAD74DBC0755EF0F9
571BFDA0BE36D37D66363FA5293530BB1F3CD4376F3FAAB05210E2AEA53243F7
52CCB0ED997AA0478BA20FB7FEDD50FC36AAF76BE9BB1BFC828AD2E160F96C8B
90CA92F21ECF9CEC1657C71C69048BDB9301DEDB1674C3DA0111E3CBC15CFD3C
4EA2FF9B7E372C940C34D71FF7B7FAE5937CD4C6206F1545A1461DFA30D0F7F7
BEA906D75812D150592B708EB41E3E9B894E657B43159D8129CE3CB1AFAFE432
8395927D5D85D24293E3ECF03B4A5B63A971E9E504814A1CFB52F60E023CA138
EFCEE2E246C6FBF7AF81630306D67E921919057011C1C5F48E8CB6D36ADA1DCA
30C1E7CC0489909F4056057D80426F63A466BCA5CC632B36D3383CF38F660701
59ABF5269AC60BA1086390308B5A32CB38B473AE549DBF26A1CA44140EB499A5
3ACEDCE7ED509317B64297DFFC002E254B514F1B2B5C1CF44CB692DD5DFA805B
7D338A0414A2EEB8EE5D2E3E800ACCABD24F7744E9505938318D6B70289641BB
194FD9917C1EB2175E927D6EB5792D2E01A6E00992EC1053D3455228DACD1BE2
F092AF058D1036513CBD825F6A292A8077D0905556702C9EAED6CEE22B55D1D3
C348E38820B85CCE9321F6352C8A9E333EB6F3F277230D34376F359F46C565F0
55997BCB06C2281D0E52E889FDCD1F9D9064F48FAD6D6556644729362F6B50EB
BB0ADBA103960B25D7D3882517DB016A3282986F90F41500E545AEC52D71389F
ED16DA61501E464C243643D727C0212022EBF130575910EC324F4833106C5B2B
156D60DED66EE608E53D9D704CA93F08D1319B7311430EFC8B5BE6861FCD6156
8D73E49912B2D0AF3BFDF425AB1FC777D40223958BB4DFCF5C7D00335585C46C
1075ED1AD962E0CAE8986CD827C2D0E2665968253C1323A84BB064151A66FDDD
1D9D212129DBD502B2CCB0D9279F89178E7F7FBB4DB2CA4699E6019D9F8761C8
D88F031A3883571FAA6D3962C9638A3AA45983041115DB8072B315902F2E685F
BF079B9CE1ACAA886D716324BFBA5FD5AAA5E8450DCBF620E7175F414172253E
575C54CBAD39494E206B58C735B6E4CA1DEBC91695BF8FCB96DE5D411B1BA95C
940640E5D52C78FEE29804D087F235F241796EF7470A783971490821D6500D9F
6A0E8F0A93EF7A39A2819597CB761EEFE9198D9C5A2ED582F1FD4ED2CABCE396
9F781E383DC68D78DB961AAF90B8797DACD97502D93430B96B99949ECB190D3C
02C63DB8895099E990EA09BBC3F67ACED56B66DD49F13F74E22722658943AA0F
B38FA9FC3A85A9529CACE6F82FBB41155BF16C387207F14217607AFBA7C18C47
A067330653B5920D4F50BA7DECBC212145301A2C6BE2A2AE18F0B6EB93A648A8
41FDE48643DFBDA3F4502EBB7341BF302E948068F4DDBAA8A36A845BC481C88F
54BD7D4B325F964C373CA2A58A678026968855B8822068B4B719BB91DC548B99
CDAA37930D2EBE91BE9E0EC0E8957E5AD1F0540B2E4EBD8D335EA5F75448D673
F1F3CF430BA49A92E7A1B1F62A9C6EC04DEB65520E58E43DCF8E7D8BE51AD254
4DCA6F51381EF5DC5DB36E48733DD85321437727F0D153945801D641415B8C95
8B346537A32FAD9F24CD1891EB88887054AC5BA1A12B6D5BEFD5865D1DE0787B
DD6EB1FC339B815F9979A145F1632070DAAC1968E358E98186F945BCB70A45AA
FC32A2264140D219C76F8ABE30CE7C15C17D2D0C33C8243569831C29D3434997
AE7B748FCB850A24CF2C9E4D402FBF1C44025BD18B46EB56B41D88BC1CB5FE2E
1B94042964DE07CB70697590BE92D4EDC366D1F0ABDD9B3804699073EF7576C9
A61A2BA06707406AFFF3F7E187A29ACDA36D26DA503A916815BCE3016174F0F0
51570A1BA1E8CD974057ED0A5EE9B4E98357F24D3DD6F104B42C10D5B9C9B114
D48EFB3EA9965521935FBD350942739AE2979E5E475D97CDE613579283F5DC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%BeginFont: URWPalladioL-Ital
%!PS-AdobeFont-1.0: URWPalladioL-Ital 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Italic) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -9.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Ital def
/PaintType 0 def
/WMode 0 def
/FontBBox {-170 -305 1010 941} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB5F973DECC54C8130ABE
C8E23C8067FC409DBA23A469DC7C6C4F7EEDC3DA588EE3C5B2829D3E1492978B
F91C30C1912183DB62BA489418A68C3BD44566603673FAFE6C3DD78FDFC1F6A0
840DFA44EAD8A5653DDF2FE86B8BDF672707D2AAC76CE376C2C9E56EB95F30CD
75B1E312BE777EAD75EFA21114335130DDC559ACC1A14454397984D624EEB43A
C7BD688E270025A34A912884DF387744462E4F666099415F25F86999B31B0588
576296579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FC
F88AA072958C75F616D971AFB3D9116E041EE7B66C39DA4481A97509DE7AC156
CB43C5A85501E66164E5FC61F9C64EE138CA0D9A0808BE0443CF3FBAD13C63EE
E7E39F1D385A453E8095DB2FF5914A611E11BBDDB04D6FC55D51B08358EF7253
9B8E1FE26561CD5CA9661C91D264B3810A37BE373BF66FCB021E4407375ECAF6
BEDC1561D701A5885F4216EC592958C80DB9B8365D66A8E075A88782C4BC6161
F6B5246F49B14E4E086FD10E01EDEA5D95A0F67D9F6D16C093CC98116B652B60
04B7FBD451E536399DE7A8D8B8E0740228524FA5CF81735BBC72B976F955FB3F
85B91278057DC1FA6B42FF84B9F267188631A0EB7B4456653620151073F4275C
9B80D71B4DA3EF23BA2811F90A844D2D4A18C2D3E7C75DC2351F250E946C49EE
1D67BA5377ABAE009B18599825EAA89BAB6B56BC1177B32B4863A004CC7448B0
27D9F6030ABABDDED61E95CF4D02EA9170BBCF04E982FB170EFF61B5F0A3E39A
E4596CB6B478F6EA85D464460C3E3C301813928D1A4140ED2931D06F55DA1B92
575627B7363A7B2F52C2EBCB003F3168ACEADBC274B460104B32A37A35E08E61
6B4C58ED4BC82DA01AE19F2AFD0CA670D4CD12464788C7AF3C22AAE6B2B67FBD
72227163E56D6B000CA09205E68B60EE5E47FB701553B8F7DC016ABD326CC781
1E1DA6A7A140A0D43A3CC3D5222B75CEEEA7915AC36C9EE08293353FB39C1F05
FF8F315274F9E2CED24900FECB6728708C0BE082CB873440C4640D55FEEC5F0E
813F2C217744EFA61F56E5B463649E058E10247738575EBBA55324AEF93D86C1
A0DA6BA58119FCA2570964C90546BFA51FFFCEAE9E1A97661A47326B6308D41B
37EDA6EBBD88141D1AFAE8851859BEC954BE182281F4D165C4D4E6B00BF84FBE
6428597412531988959402434ACE821D263606A374B64A01E25C9C7B71DFC5E7
6D39946E99ABD6F2B63BDE0EB1187C1B15A81CDFECE6C9A7CEA474FA9151DA64
C5A488EFD0D6F0A5560C188EAADF0DF449FB9D09F917E5CA703C7E900BEBA300
B5D5882F227F5EFEADD582C932F59D55EE747160EE6EA3E6E8FB3190B7E1BF4C
2BD3DC8A877144F32F4C32ED1ACE9C30DA3D7B34C2DC4F35968EC6B10867FBDF
CFD3062E20E83FA69D9B4BA8A2016A9B2609C78DD4A7B6D83F99EAD74396128B
0C14658CE0AA0AA4B0933C1D7EBFF54013A009C9286A37159372E9E123C3FEBF
42BD06F669C0CA2187337E87C6ED7360D4175F0202B68C507C4C5DB9E33952A6
2D116F1439CE2F06ADCF9E627826E83BEA4E4804C07814F63D4AF2683EDFB240
D683186FB75C5EA1BE174E29CDF4C2C90F4C459352F8149CF30339DAA54F8FA1
0295E55DB271BAF42325A7CA185A61D33A7E3016DD6362F2C869274F0071E0DE
691DF9ECBDA9EF89EA374D422A35992316A2DEC84AAFBD92F033B33EF2BB8A47
96B114B60357631E8FCBF5BC6EAB714EBD60E1D3B1927FDB38FA5B9FE56253EB
0B71E4888DC2E5A2A507AFADFDEFE31EA84EE8F4D9D971AF27AF1864D018EFB6
22AE95BF037B7C03061B9E7D322712D7DEE63C22CE07BC5AA101037918C9F3EB
2CE43BCE3F328415B220602EB435C268C6BB20D3A288E01E2B9173557BD09FD6
11B9E0E5D07400061A4A73F4A59CE1CA5EC9CD3B6E3C1513A14DE29AADF0AC9F
4B4CC126DF27790610135C54945D6DC2C09A0F32C2954C689BB04A12A787BF54
44654068EE836036C4EABC2FFFFD635262090F869781BEB773AB17B7DB1F34B3
065E7DF448EF7C84C94015C381514C1E1BDF36283AAFF8AD785A49E091137861
8DA8FCC16348F20358F4183719B34248238B42991A047119B40830A39909494E
86AEE21694223DF25553B2285CB5F6566613FC427B31144927ACE6A316026606
C6576B9697457E6FF9E0F1EB6964C2FBF17B6399E8D38E95145F61A7C343605A
2CE164FE26340462141C8B5DA393DDE17C782891C2297D5B212A31749F189076
CCFC5BD40026EE4F33793041E83EF250D854A728B7F0E9CD9B977E0FD77C2B28
FD79C68B02B8D1864A177B0724F860C76601359426E7A7D188067DA18BBA1FFC
28AA0B2660C443D24320003930CD829953CAB516EDB843054B714A3AF82449F3
E0B59AB002C3F5E299E0C0F7F1D0C83ECE888457C900E82C4134AE30BBFF5777
C5F9FCE9085CF55CE0548710F84BF1F7D89E22D34EBD2B3C90EF5D9AF0A0DBD5
145F0FA9B33DE201E971AF222C24758A9D002CA04DDD891FFEA41BD8CDA5E62D
FB940A1A24F3D5BE6CD45CCCEDC4B55E91D383FEE2CBE95660CF4ED34903DC09
4F76F9071CDC8414D5EC6418DB8179EFF78049A3C48F0C02422C45C1CE04C07F
49CFE7A8E40CCF6CFE964A70E8E16BD1721DEF363B65AB012522DCF1755737BA
5393F4D22C4B17B5B519213DF80FD44FC66C5E3DC9C496466CBF7316889A602D
35C37EF36DEC95AF26E9BB0E0A5AB417883A321FB7D218D63E37114B23575DA9
A431D735233093AAFA54FFA50A3C775B46790D67CC09515DB1DE6054E882EE08
3ACF0B95B9F10B0111760291D231BB07679EB2ABDE895E12261315A776E25795
D0D94B5EF539C729DB9E22F46D677CE0ABC6418B8A58165382B84D71F7651E4D
F128A822D7B2105A740B00B79F4198FB57134BD4E40FBF297E85C3F343EF94BD
5AA08097CBDB2EF8D42ABD04924D38E36AC76AF21480C302DDB5DB4FFFE73264
168B4254611998B4C515EEEC95A7DC4044F60BD2A1149862434B7002E64A6393
DCF0F7022C4E8DFBF1D77A634F74977E6CD6DCE4E6A80F3AF65AE92A9089683D
CE3EC5E6EC689DEDF6B956661666684C07055FE2A3B6D81785B7918E703493E4
A54487A84A1FE0826D7F99326A41155CFC74E5A883D850F4F7E5F3A3B3D2F64D
8C9A780CE75C1D1B6DA46569FBD54C4EEFD5C1CFDB30B78F38C77D316428CA16
B43BF85D8CDF4190293C6BB60E204B16949ED17C997D66D0491D2D29CFA7F4C8
8869E2D53DBC1BA3904E3B7F10733325A804B4056AE560F15158768A6D525713
A4FAE45EAF59536DF5A7E855ABFA3ADC10C441E4160DDE659F85ACB1F058AB54
9FBEAEF5266F098EA2EB484D0FF08E196EFC5F2CE715B765EEBA2DF8E88A8951
95A237D07BAF94FBD27B57EDF49EFC595D0754B270FA7C180D3CE759114D5D58
C58CADC880E37DFA97082369335AAA53A4D891DD3CA40653DA253A8B131A0A10
8ED471DEAE46632A4168F250BA26B15FE526F0C623500F91DA8EC4D2120A75F8
7B3F5E20A36AC0FF19688AA0D1236176D4296225700B5B757AC4BEC20A08A788
8A00305BED45D9326985DC273B247C2A8851C10D598937DE1949F1632130CB99
E97048161FDDBE3FCAFDE0F9D5DCE74485FB82236243DFC784D986488691EF21
286FD1DFCEEA46300D155AD1D653924939C1B838BFB3B47C148CD31D98C18FB1
E6EBB38322F8F97E4D1630F0FF188D85D9AAD40137BCA62C3B29E2E980826C44
0437047160BD6F374CEDCD964551830B94460AEA1DD6E786BC8635AD44FF3448
4C3F246E512F03D29160AD846E1C363E658ABD7005CB1F44E6977A1ED764A48C
BE3A8A41F351B90AECDC902B4857D90AD519A3FD68256B2339AC7F6C7DC5616D
CA6116E941FCE1A20FF2E6BC03A6C02AE31ECB1E21B89A263CD31A90D43314D3
0088D5AD7405A39B1712651CC4428CC0EC249144AE6C7D0A35E761A3FEF74BA7
0299C074573596F87DB84AA03503B48F6451B1E4853C13A1479EFBDCFDB925E4
5B3F17BE776D928625EFA8AF51BF06EA53C4CA7EA1C1D0DF8B24B9932C4FF62D
C6AC474AC2F11808940D6E9AFAA51EF6C23600CAF584B0D4AFB602504C560DC5
90052EAC34F2A466F5795C0DA5DB14593F57087E60E18B8233387B69DB4359D5
C57E07C0131287CB8A1CD7229ED655CBB95834DE5861E0AE858C398D95179E00
7A6CFE211D85A17C061D56CE72CB67E59EAE0D87FE8400FACF1F35C809DB6C5B
F98E83DA93D05D9AF0A0DBD5145F0FAD8B75F27AA182909671965AC8849B3B88
5B7DAA70ADDCDDEFD4C2937A154FD01A8619131F6C724A435B9961702DB6B662
4F3DB00520FF4657F7D127A24EB69B4ADCA4823726843F3F6A4B5F54DC2F30B7
92C83DB0D7310579F355D353A47EE953FE22B755CA1B83024E916430F66DB9BE
AEB86F6B295849968F489FC8D7ABE2A5C860D9EE2E4BC4D39784ACA3F8B90588
50A3350F75AD6D546AA3F5C98F5DE4CBA318052DEFF17F648F76D3347EFE1659
6FE48BC2B92100E55FAE9C25574971375F6E7FD7F1641E205BD3C820B5D6983D
095A0D6CF68EA43084CCE18F561E0662D1D1E9C9DF1DA7866A772E358CDEA9FB
A4EF158E2784F150B9180ECCCC77586E39586DB7CB534D1801C3F51F1F8ED881
9E41741EBD5CFF2A4FA545841C4AD7E64636F3AD561C22720C0C78F40D46FFD5
B2E65606F6C0A13A6CED42FC81FFD714DDFB628CF9E54476B4C9042FAF19C8DC
5C4427B7A47FB1C052BADA835F45B43B95873B87C2220034C6F979B5B3DE3BA5
858C38C9C13372D09DFCA7BFCB7F37873249128C214C434123A76CCEEB7DDC75
4E1BEE6C8EE443D62AE6A2C9A48EFCB71AD21A173272E4B12630C2651431B355
4ACC5D07ACEA1E0F813D0D8598B7310A3DD57B13D3C78EB58CF7FEF83DB4A6B6
64F538E97FD6B1BB2AB26E23DC03A8E6F3F088037D225C9710D3594B52234E62
3A545ADC9B1493D157CF8FBBDDF2DC4B8D59F781ED48E700F5B35BA0CEC0EE53
7C67FA45EF0CCFC2AEA3B4E47F70BA2D5AEE9FFAE55852F3BE0F732F55DC22AC
C3195E9040B7DEC0E8B841FEFFF8576A0FA938B0A6615694D1A83741D4F258C0
6B03183ACE22E33B44B8155EC868D4F208148F477747952B1CF85A63CA278DCC
38682E1BC6D134930242730DFD17C516A12F78CCF3BECEFDCA01075C07B67CC7
F6C981A5F3736A7C0EDA3E239C23A9BC94D2BB2581629D0C9CEE513DEBB7236B
120EF5502844E750853317185E95A7C250D12D62C959A39542360C638A47B363
1DB34AB2DDB4A3A81AB7A2A906A891187692144C02E84D49BA47846DF5BFEB69
D1D202871BC2B15EEE8E1AD13E7308928E76A318464C6B20242E8CD67888F92E
655BA87F5EB2D25C03C1817A5078A751676B5DDCEEF6B61E61A0008201F21DFC
80B011B6C12327592F8B086ACDB860B1B84DB9BE58023650828811AAF0B2D2BF
FB1DE04F1F42A5D70919206C2286491A09574DD1C3A856D78E15E23EB6FFC0B4
17B8F55865BE7912E587ED023175CA28F0435E50D1F85A1B064022CDB125DED6
3017B3A00DCCAC564E57838053E5FAB3A03B1EBD4728D2695E56895D60202E72
A8E90EBDA5348AF9E35BF49EE8884B7C5D3F15484BD506461DFFB29C06966AAD
34DFA130910F11734B905252FA132EE78E668BB75CDAB0D838ECCF9300E34C7A
CFE04FFCBB81157E739C254AD74E3EAAC2B681D7A60153CE19AB3CE48BB89C85
B9B0B1BC213FA7BD5DCFEC68DCAC374CC58F53516ECD13D634666A33F03C778A
1A810DCD869D660DC33865B7E7C2582D55A685598D8408D1190424E34A664631
E00C17D80BEFE316B7F259D4D3D6D1F0B06737D3F368BFF332A757963E99F7EB
4E1D1C5ECFA2D925E13BD7D67620B5D4DE764CC4DCC1467C38F6BFDED12EA660
33FB688FF4C0E8E22BEBE86D98234C679A1CA1503EEAC4658CE24F7DEA022AA2
05BF77E16D1B0387843CD39A2AF0EC9B516770F835078B200461EFE9B2918366
85071A7C7643F9546740F04F0BAA5B6F3E6DBEDDECE528707A7A31EAF5A8AED0
A74144046F8315AE5CEDB4995959F15CCDB5EDF6FC24722ED042F0A9F8DD7CBE
BE018E1F056476FC098BE6A578D72DBC2E4B72A2D895A5278651158393C46197
085C2280AB15FA42F2F264CE7FEED86A019485EF31E405ECE012FD1674F3535D
AB490E8F051B47608C92E95FF8A7101A329AB20B8A48A155EBD50A5DC1919F4F
11B8EB412F41A2EF916B6A2EAFB651D0E490A79CB8484AE4B63DC458BB905440
E0ADF465AA599C0B0869BBBBD14E5A17C1B223F173BD86C842D1C9ED10B006C9
498D723A6CF6DF22DE3DA6095E85675A81A0E8B75D1C32E17928D76E4F094445
955899DEC98013B1859C373054F3C9BFC9D6208D081F67125D3750E3B00171C3
22102F98DD2B22CFFDB4DEBECD7F1DA1FE2A0EFAC740A45FE966833B2C67D64F
C6B5E80C2FBFC8F75ECB495B1941E759A7CA7CBB3493E0EDAB19EF1603373D80
117733976840A4D7AF048860F5DCE5DE21E630125AE0B4DBB739C1DC84CF3B4C
E384B09C784A38A53B57E2315E4A6774F0070FE57D16CD9C5C15105496A89CA7
2ED60713657B78B7EED0FE6688F771592ADFAF9C4ED4EB64190C4D5DC1958DAB
652A8A09F975F97603A2814A200FFD14091BF1FC2387A9B2C04618D40EF0F95A
F514C0EAAE09CE5CD4A4D7D79A19A78F81080D573301E51EC1EEA8B3DE80BA5A
E3C9CAEEB98471158BC8A24E1E5BC06A746D8169F9DEF2FF03DE142FC9CCAF37
A49046BD8302E7A7561156BECB7331238D9B1FEB1FC46E73F73447CEF04FD2EF
771D19C85D35D92D522329A1E7AACA6EB441F94945E2D4D1E1A72E1BC3F3AAA8
E5FC296B14CA13B78DCA3B787D2DE4B0D2E7DDD5ED76B13E6105CE9A45C05E32
7890EF8FB29E93367FB125F5CB35E38C25734E58E1F8C4F1310875C52B979877
1DAA6051188196EB88640C181012EDE1D43CA2F4C7AB385D3575D8BA201FCAC8
ED2BA555C15FAC6C5EA83DB89485E2C6A0C04ECA0A07FBEA941200FF7287EAC8
B21E07BCB010CB49435F06C8D733EA14A7BCEA217B67A2A69476B02C769F0A3F
EC0CEB61A53D748839A641AF65E39F7DEEB9CC0C555E40DE651CA77E71387463
C6048D5F4A989D5A1E2D40180A087B0ACD6DA95D0C736F328E45FAA8211C2332
C4E8B84631A3D22494D5D2B9C1ED8194A2D3A51A58BC547C8E01DE3A9CDB82A7
E04D9CB9955A8F1C73E2B05B537F2015DABCD6AD3114B4FA2F655CBE924E42D9
F173D37220C702869A563789079E798CBED83648371142300F36D63F02B885B0
8D2B15826D4F4DB197440FF4CB1A5AD320B64B97FA7FE99D60F24AA5727E2172
4D43F5E04FBCFB5D6CA0A47CC34BE5103E43D501B36C7A86155161F9F0FC875D
8CBA82C6EA7E663A2AC303748A2CCA4C1C88BA8BADFBBC3680D9D81DAA41F45D
8D7BA4E186C93017920FB3A505F9978A7ACE4B722E46E0A9A572D60D2507B755
9E22271A72B34899752D7719839AC94C84EA55D3BA3540E8D52944FFF20870D2
1EEE02C9C81C7EF59A90599E452146522A5801AC70207E2A67E647D2A7F47A8F
58EBCA078F7741D6E9767FD0216E322CE1EE9EBBCD7BE9F8D2B23F20ADA8B35B
AD6114583A3042887DDB372B64ED3A2D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%BeginFont: PazoMath-Italic
%!PS-AdobeFont-1.0: PazoMath-Italic 001.003
%%CreationDate: Fri May 17 11:17:28 2002
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.003) readonly def
/Copyright ((c) Diego Puga, 2000, 2002.) readonly def
/Notice (Copyright (c) Diego Puga, 2000, 2002. Distributed under the GNU General Public License (http://www.gnu.org/copyleft/gpl.txt). As a special exception, permission is granted to include this font program in a PostScript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/FullName (Pazo Math Italic) readonly def
/FamilyName (PazoMath) readonly def
/ItalicAngle -9.50 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /PazoMath-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /alpha put
dup 113 /theta put
dup 116 /tau put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.00100 0 0 0.00100 0 0] readonly def
/FontBBox {-70 -277 902 733} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB0A7F85C4
9167E58A181840EC46CC379EAAE07071FBD381C7EDF50327298FF86A6A4F6812
2553C2CAF67371991CB73DD3F08A7BE3D12E5D0B885AA74F37D1940EEE91E918
45D5847CDBAAB475B142774C14C38D20D16027AAB426CFC43043B69E67862958
8D309D463F6EC259BC9BAB2689D1380DCBB972BC5D1C6C0E70024BB94743B0D3
0E708C018C6FC49FB3675CB4742FEDFE96626AA9EA7D3C796CF48BB4AA39B8A6
F6CE05666C879D0C0A32D94DD56B8F9D70D13AEB18E9CE60CFA59B7C09A1315C
F5CA850E22F7A7D830CD703ABA72AF0809353FBF829BFEA6DC6BDBF71868E50F
4FB5CF3E74205306F4A0483E4392234521E9BEE73DCC872013FA0C00CEF2FCE2
56118ECB17B68E6CFE34CA1ACB4ECAFE88D23CEAA9A342E6F99DF3E6D5C384B9
73331941B9FCDC23DE031D356228C697FBA2B4B23D1F6666CD4B46786097125B
BB9405A45FAAF63F5368C50330336F4B21261921A08C5A26FD946FC76DAA4D31
DE30F498228E6805F19356249B0CB284D0C92F91C19B50408B9A1CBCACE3A2CD
13642CAC2B58B5C098805B8D26695ABFAC108093696675CFFB67877D51E33527
8A9A4191C6A0F004CB20C4A34BC4446593A38EC5CF591C6CA42E6F2687735A3A
91BA805B7E95C85D8B19F58845029CC7F63FE860355B39504ABBE922C21E84CF
0223052B9600CBD2D7F195ADF94FB5BCFB53393ABA60795FA7875C01CBE21F84
3DE9937E9DFA1FA1FC62E3D51CC8F9BD7B033B181C2E360D4778644FE826B56E
67BBD6442947964BA6234EFFE258C04969109B86BF934FDBDC3A2EDB5A22A727
47C69DE261E264E6D19CE391C9812D7953777F081C42F90C9A7A72B39A1F0DF4
B294926C617885AFF629567C9F7AF2CABC182BEFD7EDD2AE8AA82BF9D60F2FA6
1048F1FCA7F17ECB7CDB1E29C436D1A232F19E436B8B6E503C2E481755CBA7A9
8BC9F176A27F776F07A7CA94474DE1277A94E6D20255339FF569DF7E17EDDE5D
39DA2DB64A52F694A638F30275D7D627FFA0569800C1EE514461129929360F26
2797B3C6D367BE72850BDEF8A8DAAA5DE4C6E0D9C40D0A3BBC285C7AC922CF06
7C6184A2C0CA07761EDD4E519CC813BACB44D6880725F612A0DE4A56CA84B3B5
1AA797687145CF5C7FD74B5E4EC51FCB0964E2C6DBFB0BB25BB13F0D8078406C
22EC33B29D0B19F23F8B1CC70A4338099817FF47B67C72B09D5CD6919ADF2E99
32C4295E25982DE1DC5A7CFA43701E02B831094BE25D3073A6940AECB01AD07E
B5DF02284623F4FEB36379DD63F00985881E885DAE24F8B63DB23A8D041AF820
430E7DBD90AE6B141D0CC94768B538891AFC33B1E9929C9CEE82C76A1A232FCD
FDB6073730B912C0E56A55E18E0B8D3C521BEA23FE2041BE9D41C128CE151FFF
0B0DE1AAB06A056405F1094AFB2137E531F829BC2AEDC874B4C832C39721EA5C
3464B0245E02013E1666DCE85044D5A75AC0244C26ED6EEA47C3FD8D9159594C
BCCB611E3B274C07D85229BBB2BB2F0FB1B3C663840413AF776CCC9C4DAFB2FE
AADC8A76E374DBD1AA2E2F1D141E863F5877A8561FC3B716A8AF83B9FAEF975C
AA1FF748C2309F541BDF8B1BB46BAB7376FF7C80634400F755FC85D08E90341B
411382A5986E1F3DDF5AEA23709F997BDAE4EF14F9E60E487517C8ECCA81ED1D
CF640274DF45A0B3BCD6478ED664774225E83D3E036A9A95E433E0EE5E69DA51
D0AC505C9F715607A353568EAABEEC84B992D45A2680BAC63497C593C90728B1
2C2C1206FAE8F5F752A36C01D95CB3DB66B016182940F790F212398D1FA9D5FF
8CBDDFAFCA66543CFB72E8DB15456438FED1B333FC882FEA17CE5ECA50FE1EA0
CB822F7C5EFD369886C0660238367A24EABFE24B42A1642FCAEB99606BC079F3
230443D11313D6EBB9324A522035B2875A44EF7DAFEEC6B06D7DB4B3BE25BB28
E8757F0C493522A4B260C55A31AA1939D02873061B56823C9811B3B5ED20AD2F
E457E763F1E38A6ED86CDA24815820A6A2C9C88C5EC3AE96CD02A7FBF898467C
4A4B362143F510C94C26647858F142DD380FC1B1E6E3B114C105A187E4ADE018
6B8ACBDD4537C983CBD49B3B53718C98D58C9B03171C5A32A41F78AAC8D9C90F
998103A821C35734F0153950E5F72FF6A8ADFE4D814CDCAAC830DD6D2B235301
9C8CBCEF3798266DAD877E9208260AE6AF24100E2B365BF89C5B67937799EA0B
4A4AE8F1ACECD1339A3FC0F865201B6D7973A03CEDE934367F083F6561C93966
9E28B55BC33040583C00360A382EF21A8DD920396F7F52B7D55F12F9F46E7977
789B19EE83C5BC35BFC48D8CD565397A634C5BF95DBE48FE4DA1BB5D3B1B4DA1
454568CE418A67152D4608394B82E83877E96D5FF7F7C34ED8E215AF1DBF25B8
690226C381D7064768461AB4771188905A7BAE80380D6CFDBD82D34A78EBD78B
3998FDC0EF19E076E25C4799D60C2CC73610B087F668AEBDEEB7129973FE3E49
2016FA5C52E9920B3939DD770971219836B983024EE9541B603122C94655B5AF
A1C3762C47B28A45D6F516078C72A4B155A2715B713EC35EE7853D94BE904F87
0B9858C36B4B055C846272F1FCA0A1D8287E95DCD5BF08A1FFCA11B8BD493853
D06D6F6B8F4B86C231B10100D1BAA6B29F192CEAAA9956C9D3A6271DD6C27CEA
2D32409DF97C2A92B344786D1887361F7897A2D28A562A935226FF823955C3AE
C422ACE8B379456632E7FD1AA490E97EF1BD458DF085A5A1D8287E95DCD5BF08
A1FFCA11B8BD493853D06D644DD29D9B14C25FA8C2E8F6CDE3B28720EF13D11B
B77DC49648D46F2741B3A91D9032F24ED8F7853E8ADA0E2210AE5ADE0322DDBA
57C4B946D6F167A57E11A5B5A37F8700C76BB5CD1B7261505A235EAFD1ECF9A6
81D46CF9314CC3D7E9AECA005DB43AAE1E43E9545EB8B446FA7B95DE6BE87883
4F049882952ABB5907671E030EAB134DD682DCBC98DA7354ED6F027086B464A0
9D3742D17D7394678F62A887E8D0BF7D4CC2EEBC906938300F28D2480970C13F
34108A79D66076BF248FBD167F9E09D669B0F51A15936D7113CA577EFAEC7430
63CFB5984C672E6E969F44997CE9408AFBF504CE67110327E58CA6D94AA297F4
A5DEB640E58E188126D055F4545D08DB68917EB559E955E8D36EED8031CA7034
4FC3B713E97C9C215CF571440C39E78A0E96840468E9962594EB343B6544509E
F5D8303EE1D65918E075D57D0B2FF14166B8409734C5CEEEF3A451BA78C540ED
C686D7DD6BA7D4532712589E7F780E3C34772DEFCE4B9B4EA19601F317182E12
471C78226655CFD75F98D6EE7C003F6EAEEA25ADF68DB6EF188E3BDEF58EC90B
566D8DD78A04211C46F404C22F97DBCE93C8358AD4D2C3C4BCD7FA7AEA0E6B80
89C0D348A576BE2E41F7274A1F1052ED1DCC7AB66A3424C8A62B9F600432FE9D
CC5A02C931D481A46611E51DB2A8F39EBD0D459B547F0CF5B62391836E6FE811
30FCC249426FC46D07DA90C9BDFE2B01ECD517F7E4398E0096F0BA9572CC7328
7D9E2DE01D0CD2E6459F7B0885ACD0F8D9D35B6927F14171062AA5C27E90154B
7AF6AE79B73F3F7BE196DFEFB02024A470A61ED34B6FBA4212D81DC64801F303
FFC025950FDB0542975D6EEEC15B189765B549EB5673BFC1875B03AF80565E1C
983B206852E75FFF2FB1032E3C5039072927D700469837665CE04AA79BAFFBC5
09D43E2720C313EA4C79A927EDB3BA8406542E5260057DE00484F7A7B09D80DD
EC9EF1E96E191FB5BFD27B08D2D65469AF6DF91749D8DB8DD72DB1F106F15AFC
3A26637F9DAB3E41D4901FA3C68006E199C054F061FB2E1500BA95F7CDDCBE10
1EF41C53F98B58DB9A5EC09B2FC1922387A26E7538CB0F861726748CC5C92F3E
A2D50256FC9D5FB727870725C59949D9C295637FD66D030F85B79E440137A854
A2580FE710561128C87E7DD11FD4931AF32421C83A9E7C5B4989482EAA14F741
0BE7142C6AA832B294BEDA7B97B4971103B3CF06E89E5B74EAA6B190780E4A26
A46D3805831A8BBF565936F8CEFC9C5BDE2CA3BE571B3CC8ABC106B5A40F4DBF
C6EAF9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 62 /greater put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC8953C83DFB6FF3C5F9113898F45B76D98F7F118FE4D1E6BE669545C3
92676FA583E3D3B272D5BFB24153AF62BF53BA0C81BF5AA2012FD33DD7640BDD
5CE8BA566FC85FC277B1EF69622D720569405B04D49FAA4C9FB2D4E3983D5C90
6B9A4327AB712D655D33EBE0C95E1325576B034525DC7BEE4BE00928DFD23FC7
42F317916B81D6B189FAD3045D66E40AED0B64F709989F419019BD5CAD255631
C91E48735BF1A70917B17928088769ECA64EA6FF215A445CBCB6D6D784022768
BAE9BE186FBC80269392EC8C86
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
TeXDict begin 40258431 52099146 1000 600 600
(rotary_flexible_beam_3DOF_breakdown_edit.dvi)
@start /Fa 194[61 61[{}1 77.858 /CMR10 rf /Fc 205[21
21 49[{ TeXBase1Encoding ReEncodeFont }2 41.511 /URWPalladioL-Roma
rf /Fd 141[23 15[27 98[{ TeXBase1Encoding ReEncodeFont }2
58.1154 /URWPalladioL-Ital rf /Ff 205[29 29 49[{
 TeXBase1Encoding ReEncodeFont }2 58.1154 /URWPalladioL-Roma
rf /Fg 180[50 8[46 66[{ TeXBase1Encoding ReEncodeFont }2
74.7198 /URWPalladioL-Ital rf /Fh 134[42 2[42 45 24 32
30 1[45 41 43 66 22 2[22 1[42 25 36 46 33 41 37 38[19
9[37 3[19 44[{ TeXBase1Encoding ReEncodeFont }22 74.7198
/URWPalladioL-Roma rf /Fi 193[61 62[{}1 77.858 /CMMI10
rf /Fj 139[39 2[33 15[39 97[{}3 74.7198 /PazoMath-Italic
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 0 a 0 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 0 a 0 TeXcolorgray
0 0 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 0 a 2499 0 a
currentpoint grestore moveto
 2499 0 a 494 1654 a @beginspecial
0 @llx 0 @lly 142 @urx 140 @ury 2406 @rwi @setspecial
%%BeginDocument: rotary_flexible_beam_3DOF_breakdown.eps
%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 283.000000 280.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.10.3 (Build 14D136) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 142 140
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 142 140
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 141.5 140 rc
-203.5 334.5 m
768 334.5 l
768 -299.5 l
-203.5 -299.5 l
h
-203.5 334.5 m
f
2 w
1 J
1 j
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
603 409.5 m
603 409.5 610.95087 416.54974 619.875 414 c
622.28033 413.31277 624.45148 412.01526 626.33997 410.48639 c
S
0 i
CM
112.70598 132.97231 m
108.27496 130.3943 l
111.06266 128.11642 l
h
112.70598 132.97231 m
f
0 J
0 j
0.5 0 0 -0.5 -203.5 334.5 cm
632.41193 403.05539 m
623.54993 408.2114 l
629.12531 412.76715 l
h
632.41193 403.05539 m
S
1 w
1 J
1 j
0.60000002 i
482.0625 489.5 m
616.5 445.5 l
S
482.0625 477 m
616.5 433 l
S
[
20
5
4
5
] 0 d
482.0625 489.5 m
482.0625 477 l
S
482.0625 477 m
477 476.6301 l
S
[
4
4
] 0 d
482.0625 489.5 m
477 489.5 l
S
477 476.6301 m
477 489.5 l
S
[] 0 d
616.5 445.5 m
616.5 433 l
S
[
20
5
4
5
] 0 d
616.5 432.3699 m
611.4375 432 l
S
[] 0 d
611.4375 432 m
477 476.6301 l
S
481.5 490.5 m
414 562.5 l
S
481.5 477 m
414 549 l
S
414 549 m
414 562.5 l
S
477 476.6301 m
409.5 549 l
S
409.5 549 m
414 549 l
S
409.5 549 m
409.5 562.5 l
S
409.5 562.5 m
414 562.5 l
S
[
4
4
] 0 d
477 489.5 m
409.5 562.5 l
S
0 i
0.60000002 0.152941 0.152941 sc
CM
70.340988 104.34099 m
71.219673 103.46231 71.219673 102.03769 70.340988 101.15901 c
69.462311 100.28033 68.037689 100.28033 67.159012 101.15901 c
66.280327 102.03769 66.280327 103.46231 67.159012 104.34099 c
68.037689 105.21967 69.462311 105.21967 70.340988 104.34099 c
f
[] 0 d
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
547.68201 460.31802 m
549.43933 462.07538 549.43933 464.92462 547.68201 466.68198 c
545.92462 468.43933 543.07538 468.43933 541.31799 466.68198 c
539.56067 464.92462 539.56067 462.07538 541.31799 460.31802 c
543.07538 458.56067 545.92462 458.56067 547.68201 460.31802 c
S
0 i
0.60000002 0.152941 0.152941 sc
CM
22.109962 75.680023 m
22.988646 74.801346 22.988646 73.376732 22.109962 72.498047 c
21.231283 71.61937 19.806664 71.61937 18.927986 72.498047 c
18.049301 73.376732 18.049301 74.801346 18.927986 75.680023 c
19.806664 76.558708 21.231283 76.558708 22.109962 75.680023 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
451.21991 517.63995 m
452.97729 519.39728 452.97729 522.24652 451.21991 524.00391 c
449.46255 525.76129 446.61334 525.76129 444.85596 524.00391 c
443.0986 522.24652 443.0986 519.39728 444.85596 517.63995 c
446.61334 515.88257 449.46255 515.88257 451.21991 517.63995 c
S
[
20
5
4
5
] 0 d
477 476.6301 m
415 499.5 l
S
0 i
0.67273003 0.67273003 0.67273003 sc
CM
101.9375 60 m
108.55769 60 l
108.55769 53.577827 l
101.9375 53.577827 l
h
101.9375 60 m
f
2 w
[] 0 d
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
610.875 549 m
610.875 561.84436 l
624.11536 561.84436 m
624.11536 549 l
S
624.11536 561.84436 m
610.875 561.84436 l
S
1 w
[
20
5
4
5
] 0 d
616.5 432.3699 m
549 432 l
S
480.375 450 m
480.375 571.5 l
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
41.42384 65.120781 m
44.160538 65.948494 44.160538 67.290466 41.42384 68.118179 c
38.687153 68.945892 34.250114 68.945892 31.51343 68.118179 c
28.77673 67.290466 28.77673 65.948494 31.51343 65.120781 c
34.250114 64.293068 38.687153 64.293068 41.42384 65.120781 c
f
[] 0 d
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
489.84769 538.75842 m
495.32108 537.10303 495.32108 534.41907 489.84769 532.76367 c
484.3743 531.10822 475.50021 531.10822 470.02686 532.76367 c
464.55347 534.41907 464.55347 537.10303 470.02686 538.75842 c
475.50021 540.41388 484.3743 540.41388 489.84769 538.75842 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
41.42384 66.180527 m
44.160538 67.008232 44.160538 68.350212 41.42384 69.177917 c
38.687153 70.00563 34.250114 70.00563 31.51343 69.177917 c
28.77673 68.350212 28.77673 67.008232 31.51343 66.180527 c
34.250114 65.352814 38.687153 65.352814 41.42384 66.180527 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
489.84769 536.63898 m
495.32108 534.98352 495.32108 532.29956 489.84769 530.64417 c
484.3743 528.98877 475.50021 528.98877 470.02686 530.64417 c
464.55347 532.29956 464.55347 534.98352 470.02686 536.63898 c
475.50021 538.29437 484.3743 538.29437 489.84769 536.63898 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
41.42384 67.240265 m
44.160538 68.06797 44.160538 69.40995 41.42384 70.237656 c
38.687153 71.065369 34.250114 71.065369 31.51343 70.237656 c
28.77673 69.40995 28.77673 68.06797 31.51343 67.240265 c
34.250114 66.412552 38.687153 66.412552 41.42384 67.240265 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
489.84769 534.51947 m
495.32108 532.86407 495.32108 530.18011 489.84769 528.52466 c
484.3743 526.86926 475.50021 526.86926 470.02686 528.52466 c
464.55347 530.18011 464.55347 532.86407 470.02686 534.51947 c
475.50021 536.17493 484.3743 536.17493 489.84769 534.51947 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
41.42384 68.300003 m
44.160538 69.127708 44.160538 70.469688 41.42384 71.297401 c
38.687153 72.125114 34.250114 72.125114 31.51343 71.297401 c
28.77673 70.469688 28.77673 69.127708 31.51343 68.300003 c
34.250114 67.47229 38.687153 67.47229 41.42384 68.300003 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
489.84769 532.39996 m
495.32108 530.74457 495.32108 528.06061 489.84769 526.40521 c
484.3743 524.74976 475.50021 524.74976 470.02686 526.40521 c
464.55347 528.06061 464.55347 530.74457 470.02686 532.39996 c
475.50021 534.05542 484.3743 534.05542 489.84769 532.39996 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
41.42384 69.359741 m
44.160538 70.187454 44.160538 71.529434 41.42384 72.35714 c
38.687153 73.184853 34.250114 73.184853 31.51343 72.35714 c
28.77673 71.529434 28.77673 70.187454 31.51343 69.359741 c
34.250114 68.532028 38.687153 68.532028 41.42384 69.359741 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
489.84769 530.28052 m
495.32108 528.62512 495.32108 525.94116 489.84769 524.28571 c
484.3743 522.63031 475.50021 522.63031 470.02686 524.28571 c
464.55347 525.94116 464.55347 528.62512 470.02686 530.28052 c
475.50021 531.93591 484.3743 531.93591 489.84769 530.28052 c
S
487.64536 528.7818 m
491.90247 527.9541 491.90247 526.61212 487.64536 525.78442 c
483.38831 524.95673 476.48624 524.95673 472.22916 525.78442 c
467.97208 526.61212 467.97208 527.9541 472.22916 528.7818 c
476.48624 529.6095 483.38831 529.6095 487.64536 528.7818 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
28.505089 74.916588 m
31.576408 72.262627 l
31.939703 71.948708 32.072834 71.506775 31.873573 71.276184 c
31.674316 71.045593 31.217752 71.11322 30.85446 71.427147 c
27.78314 74.081108 l
27.419847 74.395035 27.286716 74.83696 27.485975 75.067551 c
27.685232 75.298149 28.141796 75.230515 28.505089 74.916588 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
464.01019 519.16681 m
470.15283 524.47473 l
470.87939 525.1026 471.14566 525.98645 470.74716 526.44763 c
470.34863 526.90881 469.43552 526.77356 468.70892 526.14569 c
462.56628 520.83777 l
461.83969 520.20996 461.57343 519.32611 461.97195 518.86487 c
462.37045 518.40369 463.2836 518.539 464.01019 519.16681 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
45.591862 74.081108 m
42.520542 71.427147 l
42.157246 71.11322 41.700684 71.045593 41.501427 71.276184 c
41.302166 71.506775 41.435299 71.948708 41.798592 72.262627 c
44.869911 74.916588 l
45.233204 75.230515 45.689766 75.298149 45.889027 75.067551 c
46.088284 74.83696 45.955154 74.395035 45.591862 74.081108 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
498.18372 520.83777 m
492.04108 526.14569 l
491.31448 526.77356 490.40137 526.90881 490.00284 526.44763 c
489.60434 525.98645 489.87061 525.1026 490.59717 524.47473 c
496.73981 519.16681 l
497.4664 518.539 498.37955 518.40369 498.77805 518.86487 c
499.17657 519.32611 498.91031 520.20996 498.18372 520.83777 c
S
0 i
0.67273003 0.67273003 0.67273003 sc
CM
33.377403 83 m
39.997597 83 l
39.997597 76.577827 l
33.377403 76.577827 l
h
33.377403 83 m
f
2 w
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
473.75482 503 m
473.75482 515.84436 l
486.99518 515.84436 m
486.99518 503 l
S
486.99518 515.84436 m
473.75482 515.84436 l
S
1 w
[
20
5
4
5
] 0 d
567 445.5 m
567 445.5 561.73242 439.21906 568.0415 432.10434 c
S
450 504 m
450 504 439.2829 501.79962 441.00671 489.90692 c
S
0 i
0.60000002 0.152941 0.152941 sc
CM
54.028488 34.590988 m
54.907173 33.712311 54.907173 32.287689 54.028488 31.409012 c
53.149811 30.530329 51.725189 30.530329 50.846512 31.409012 c
49.967827 32.287689 49.967827 33.712311 50.846512 34.590988 c
51.725189 35.469673 53.149811 35.469673 54.028488 34.590988 c
f
[] 0 d
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
515.05701 599.81799 m
516.81433 601.57538 516.81433 604.42462 515.05701 606.18201 c
513.29962 607.93933 510.45038 607.93933 508.69302 606.18201 c
506.93567 604.42462 506.93567 601.57538 508.69302 599.81799 c
510.45038 598.06067 513.29962 598.06067 515.05701 599.81799 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
57.17384 1.6207831 m
59.910538 2.4484911 59.910538 3.7904699 57.17384 4.6181779 c
54.437153 5.4458899 50.000114 5.4458899 47.263428 4.6181779 c
44.52673 3.7904699 44.52673 2.4484911 47.263428 1.6207831 c
50.000114 0.79307091 54.437153 0.79307091 57.17384 1.6207831 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
521.34766 665.75842 m
526.82111 664.10303 526.82111 661.41907 521.34766 659.76367 c
515.87433 658.10822 507.00021 658.10822 501.52686 659.76367 c
496.05347 661.41907 496.05347 664.10303 501.52686 665.75842 c
507.00021 667.41388 515.87433 667.41388 521.34766 665.75842 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
57.17384 2.6805234 m
59.910538 3.5082314 59.910538 4.8502102 57.17384 5.677918 c
54.437153 6.50563 50.000114 6.50563 47.263428 5.677918 c
44.52673 4.8502102 44.52673 3.5082314 47.263428 2.6805234 c
50.000114 1.8528111 54.437153 1.8528111 57.17384 2.6805234 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
521.34766 663.63898 m
526.82111 661.98352 526.82111 659.29956 521.34766 657.64417 c
515.87433 655.98877 507.00021 655.98877 501.52686 657.64417 c
496.05347 659.29956 496.05347 661.98352 501.52686 663.63898 c
507.00021 665.29437 515.87433 665.29437 521.34766 663.63898 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
57.17384 3.7402635 m
59.910538 4.5679717 59.910538 5.9099503 57.17384 6.737658 c
54.437153 7.5653706 50.000114 7.5653706 47.263428 6.737658 c
44.52673 5.9099503 44.52673 4.5679717 47.263428 3.7402635 c
50.000114 2.9125514 54.437153 2.9125514 57.17384 3.7402635 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
521.34766 661.51947 m
526.82111 659.86407 526.82111 657.18011 521.34766 655.52466 c
515.87433 653.86926 507.00021 653.86926 501.52686 655.52466 c
496.05347 657.18011 496.05347 659.86407 501.52686 661.51947 c
507.00021 663.17493 515.87433 663.17493 521.34766 661.51947 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
57.17384 4.800004 m
59.910538 5.6277118 59.910538 6.9696903 57.17384 7.7973986 c
54.437153 8.6251106 50.000114 8.6251106 47.263428 7.7973986 c
44.52673 6.9696903 44.52673 5.6277118 47.263428 4.800004 c
50.000114 3.9722915 54.437153 3.9722915 57.17384 4.800004 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
521.34766 659.39996 m
526.82111 657.74457 526.82111 655.06061 521.34766 653.40521 c
515.87433 651.74976 507.00021 651.74976 501.52686 653.40521 c
496.05347 655.06061 496.05347 657.74457 501.52686 659.39996 c
507.00021 661.05542 515.87433 661.05542 521.34766 659.39996 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
57.17384 5.8597441 m
59.910538 6.6874518 59.910538 8.0294304 57.17384 8.8571386 c
54.437153 9.6848507 50.000114 9.6848507 47.263428 8.8571386 c
44.52673 8.0294304 44.52673 6.6874518 47.263428 5.8597441 c
50.000114 5.032032 54.437153 5.032032 57.17384 5.8597441 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
521.34766 657.28052 m
526.82111 655.62512 526.82111 652.94116 521.34766 651.28571 c
515.87433 649.63031 507.00021 649.63031 501.52686 651.28571 c
496.05347 652.94116 496.05347 655.62512 501.52686 657.28052 c
507.00021 658.93591 515.87433 658.93591 521.34766 657.28052 c
S
519.14539 655.7818 m
523.40247 654.9541 523.40247 653.61212 519.14539 652.78442 c
514.88831 651.95673 507.98624 651.95673 503.72916 652.78442 c
499.47208 653.61212 499.47208 654.9541 503.72916 655.7818 c
507.98624 656.6095 514.88831 656.6095 519.14539 655.7818 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
44.255089 11.416589 m
47.326408 8.7626295 l
47.689701 8.4487047 47.822834 8.0067759 47.623573 7.7761831 c
47.424316 7.5455894 46.967754 7.6132216 46.604458 7.9271469 c
43.533138 10.581105 l
43.169846 10.895031 43.036716 11.336959 43.235973 11.567553 c
43.435234 11.798146 43.891796 11.730515 44.255089 11.416589 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
495.51019 646.16681 m
501.65283 651.47473 l
502.37939 652.1026 502.64566 652.98645 502.24716 653.44763 c
501.84863 653.90881 500.93552 653.77356 500.20892 653.14569 c
494.06628 647.83777 l
493.33969 647.20996 493.07343 646.32611 493.47195 645.86487 c
493.87045 645.40369 494.7836 645.539 495.51019 646.16681 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
61.341862 10.581105 m
58.270542 7.9271469 l
57.907246 7.6132216 57.450684 7.5455894 57.251427 7.7761831 c
57.052166 8.0067759 57.185299 8.4487047 57.548592 8.7626295 c
60.619911 11.416589 l
60.983204 11.730515 61.439766 11.798146 61.639027 11.567553 c
61.838284 11.336959 61.705154 10.895031 61.341862 10.581105 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
529.68372 647.83777 m
523.54108 653.14569 l
522.81451 653.77356 521.90137 653.90881 521.50287 653.44763 c
521.10431 652.98645 521.37061 652.1026 522.09717 651.47473 c
528.23981 646.16681 l
528.96643 645.539 529.87952 645.40369 530.27808 645.86487 c
530.67657 646.32611 530.41028 647.20996 529.68372 647.83777 c
S
0 i
0.67273003 0.67273003 0.67273003 sc
CM
49.127403 24 m
55.747597 24 l
55.747597 17.577827 l
49.127403 17.577827 l
h
49.127403 24 m
f
2 w
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
505.25482 621 m
505.25482 633.84436 l
518.49518 633.84436 m
518.49518 621 l
S
518.49518 633.84436 m
505.25482 633.84436 l
S
0 i
1 1 1 sc
CM
71 70.644234 m
138.5 70.644234 l
138.5 63.980762 l
71 63.980762 l
h
71 70.644234 m
f
1 w
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
549 527.71155 m
684 527.71155 l
684 541.03845 l
549 541.03845 l
h
549 527.71155 m
S
0 i
1 1 1 sc
CM
128.61482 72.802971 m
141.79507 71.873596 141.79507 70.366791 128.61482 69.437416 c
115.43464 68.508041 94.065361 68.508041 80.88517 69.437416 c
67.704918 70.366791 67.704918 71.873596 80.88517 72.802971 c
94.065361 73.732346 115.43464 73.732346 128.61482 72.802971 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
664.22968 523.39404 m
690.59015 525.25281 690.59015 528.26642 664.22968 530.12518 c
637.86926 531.98395 595.13074 531.98395 568.77032 530.12518 c
542.40985 528.26642 542.40985 525.25281 568.77032 523.39404 c
595.13074 521.53534 637.86926 521.53534 664.22968 523.39404 c
S
0 i
1 1 1 sc
CM
104.75 64.456734 m
138.5 64.456734 l
138.5 62.616669 123.38961 61.125 104.75 61.125 c
86.11039 61.125 71 62.616669 71 64.456734 c
h
104.75 64.456734 m
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
684 540.08655 m
684 543.76666 653.77924 546.75 616.5 546.75 c
579.22076 546.75 549 543.76666 549 540.08655 c
S
[
20
5
4
5
] 0 d
616.5 527.71155 m
616.5 391.5 l
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
109.48634 89.370781 m
112.22304 90.198494 112.22304 91.540466 109.48634 92.368179 c
106.74966 93.195892 102.31261 93.195892 99.575928 92.368179 c
96.839233 91.540466 96.839233 90.198494 99.575928 89.370781 c
102.31261 88.543068 106.74966 88.543068 109.48634 89.370781 c
f
[] 0 d
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
625.97266 490.25842 m
631.44611 488.60303 631.44611 485.91907 625.97266 484.26364 c
620.49933 482.60822 611.62524 482.60822 606.15186 484.26364 c
600.67847 485.91907 600.67847 488.60303 606.15186 490.25842 c
611.62524 491.91385 620.49933 491.91385 625.97266 490.25842 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
109.48634 90.430527 m
112.22304 91.258232 112.22304 92.600212 109.48634 93.427917 c
106.74966 94.25563 102.31261 94.25563 99.575928 93.427917 c
96.839233 92.600212 96.839233 91.258232 99.575928 90.430527 c
102.31261 89.602814 106.74966 89.602814 109.48634 90.430527 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
625.97266 488.13895 m
631.44611 486.48355 631.44611 483.79959 625.97266 482.14417 c
620.49933 480.48874 611.62524 480.48874 606.15186 482.14417 c
600.67847 483.79959 600.67847 486.48355 606.15186 488.13895 c
611.62524 489.79437 620.49933 489.79437 625.97266 488.13895 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
109.48634 91.490265 m
112.22304 92.31797 112.22304 93.65995 109.48634 94.487656 c
106.74966 95.315369 102.31261 95.315369 99.575928 94.487656 c
96.839233 93.65995 96.839233 92.31797 99.575928 91.490265 c
102.31261 90.662552 106.74966 90.662552 109.48634 91.490265 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
625.97266 486.01947 m
631.44611 484.36404 631.44611 481.68008 625.97266 480.02469 c
620.49933 478.36926 611.62524 478.36926 606.15186 480.02469 c
600.67847 481.68008 600.67847 484.36404 606.15186 486.01947 c
611.62524 487.6749 620.49933 487.6749 625.97266 486.01947 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
109.48634 92.550003 m
112.22304 93.377708 112.22304 94.719688 109.48634 95.547401 c
106.74966 96.375114 102.31261 96.375114 99.575928 95.547401 c
96.839233 94.719688 96.839233 93.377708 99.575928 92.550003 c
102.31261 91.72229 106.74966 91.72229 109.48634 92.550003 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
625.97266 483.89999 m
631.44611 482.24457 631.44611 479.56061 625.97266 477.90521 c
620.49933 476.24979 611.62524 476.24979 606.15186 477.90521 c
600.67847 479.56061 600.67847 482.24457 606.15186 483.89999 c
611.62524 485.55542 620.49933 485.55542 625.97266 483.89999 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
109.48634 93.609741 m
112.22304 94.437454 112.22304 95.779434 109.48634 96.60714 c
106.74966 97.434853 102.31261 97.434853 99.575928 96.60714 c
96.839233 95.779434 96.839233 94.437454 99.575928 93.609741 c
102.31261 92.782028 106.74966 92.782028 109.48634 93.609741 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
625.97266 481.78052 m
631.44611 480.12509 631.44611 477.44113 625.97266 475.78574 c
620.49933 474.13031 611.62524 474.13031 606.15186 475.78574 c
600.67847 477.44113 600.67847 480.12509 606.15186 481.78052 c
611.62524 483.43594 620.49933 483.43594 625.97266 481.78052 c
S
/Cs2 SC
13 0 0 4 98 93 cm
BI
/Width 39
/Height 12
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
q#C?Frd=]1rXJ`)rWN3Br]L0Qr_rf$rac"FrcS3hre:?$rce?Zrau.8r`/qkr]pH.rX&H%rWiE\rbqeU
q#C?mrhTNPrW)p!rZD,%r`T5Drf5'^rfI,+ra,RirZqIJrW)pDrf-pPr]:#YrX8]ordjO#rfmDKrgWnX
rh'1`rhB1_rhBCcrh'1\rgWnSrfll6re^VOrY5>3rZ_=Sr`T5ZplYQDrhBCjric=.cF3_[rilC%rhKI^
rf[/@rf@%irZ;&]qiUlArh]V#YdXP<ri#g]qiUl3plYQTUpg9,plYQ4qiUlHrirK3rj2TqqiUl>r\4>+
plYQFrhf[urjBMLrilC#rgj%OqiUl:r^HegrWW9^rcdpqrg*PRrh9=eri#grriH+%ric+$ric=(riH+!
ri#gmrh9=^rg3VIoo]6)r^HeorW)qDr[RdFr[%P@rbh^m]TN2QrcJ-@r\4<QrW)p<rbqd(rfI,.r^Zr$
qZ-TrrYPPjr_i`5rdOj$rf6-'rf@&6rdXogr`B([rZ1t?qZ-U(r]U7&rfR1drW)p5r`&lSrfR25rau.$
r[e$Znc8XnrXSoDrZD+drZM1WrX\u5nc8Xrr[7\5raGeTrfR2?ra5XIrW%H
~> %APLeod
EI
13 0 0 1 30 72 cm
BI
/Width 39
/Height 3
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
rfR1[rW<'Sroa:Rrl+l"ra#LOrW2QirW3!+rY,8IrX\u7rW2QirW`?Wrb)5#rm1T?rr;ugr^Zqfr^Hg7
rfR1lqZd$#qZ-U*r[[t>rac"Jrd"Kpreg0,rfI,9rdaulrbqdDr^6Z3rX&H%rW`?[rYth<r`T5_rXAdF
rfR2&rXAc<rac"\plYQ4rc\9SraPk4r`K.tr_3;_r_<Ajr`T5,rac"Crd+R&plYQ(ra>^mrX/W.rbDFp
rd'(
~> %APLeod
EI
74 0 0 3 67 69 cm
BI
/Width 222
/Height 9
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
h>dKNrh9<frX/N&rYb].rcA(-rk\TtJcEjlZ2afQrW%NLfDhWGrqQKBriZ6Ura>^\rW`6"r[@birmg95
i;`f,r[@aGrZV8VrilC`JcE4ZZ2afQrW%NLfDh!5rqZQ:rfI+KrWiE*rd*r2i;`darWrM'JcDeNZ2afQ
rW%NLfDgR)rp0PQrW)rTn,MPMqtg;FrW<'/rb2;:rq(dA[/[E2rdXnIJcF@%MuWe.rf-n;rW)p8rpKR[
q#BLVqtg:UrWrK6rWN3#rW<'Lra>_grk&0hrr.KK`rE=Drn%-uJcF@%ScA]]rm1SBrd+Q5rXer,rX8]=
rW)r+q#1!fk5Y>Tr]U6Frr;uorjr)Yr_*5-p]1:#r\+7Irbqdqri?%@roF(UJcFU,JcC<$[K$6rrn.4]
rg`t:ra5XjrZ(n<qZ-U!r\=C`rgNiErr;u4rW)r+q#1!fn,N1]qrI`9r]flOroa9rrgEb+r_3;BrXST$
rW3!5r\"1>ra5YHreUQDrilC?rn.5:rqqBJJcC<$g&M'Ero3q&rjr*+rf[80rbDF1r]:$&rX&5trWE-?
r]L0ere:?QrmUlAo)J^(rW)qYq"4@]n,N1]qrI`9r]f-:rpTj6rj2Tlrdau]r_NMPrZD+Gli@"mrYkbb
r\sgGr`&l,rc8!hrfI,NriQ14rlY5nro="FrqHEk]DmH^P5kOYrpp'PrndY&!Q2eT_u@%BVZ)q]M#M]!
C]7T<:&[BV0`E6p'E/.'!<*'!'`KW^6iL?iFT.6uV>e@2i;WW0s8Ke4!</&So_AITs7lQijSh.<5J7$q
p&<qLcMkESVZ)bXK)TijAc>a08,bOJ.fLCd%K6Cj!<*#u$N:_<*<%;a0E+!26N0[X<W6A)B`<#NHiAZs
M>iP7Pl@*MT)PMaWW'("ZN.N:\[h^Rrkn`Wrm(Mlrn7;-ro="@rosFIrp9XPrp]pWrq$-^rq??drqcWk
rr(mWrr2oprql]jrqHEbrq-3\rp]pUrpB^Nrp'LHroO.<rnIG'rmC_grl4rRrk&0<riuI'rhf[grgWnQ
rfR2=reCE%rc\9XraYq2r_WSar]U6;r[[skrYYVErWM]joDnjorY5>Vr\=C;r_NN!rbVR\reg]FrilC?
rn%/8rr'V3rkJF4rf?jHq#>j
~> %APLeod
EI
13 0 0 3 30 69 cm
BI
/Width 39
/Height 9
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
rW<'$ra>_frbh]9r^QlYr\4<mrX@'PrX\uPr\XUOrdFc[rW)q'rfR1srWrK[rZD+>r]'mmrWN3#rW<'<
r\OOGraGeOrf-oBrg`t^ri,n%rjDa/ri#gjrgNhMrepbura#Llr\"0cqZ-U-rW)q.r^$McrWiF_rf-nF
rWN3#rWrL4ri*Q=rhBC/r\ONUrW)p&r^-U3qiUkLrWN4@rj8f9rcS2?ra,Jareg];repaqrW3!Fr`oGa
rj0JMrilBVr_i_8rW)pQqiUl*r[7\erfR26r_i_BrWE-"rW<'8r\+7?ra,SErd+QpreLK5rg!JOrfmDA
reCE%rcnE\r`T4er[Rm[qZ-U"r\+7Srepc;rb29JrXAc+rZM2Jrf6u?reUP\r^QlCrZV7Nf)YdNrY#2U
r\sgJrau.hrfR2;r`&k4rW)p5re:>;rX8]*rXSo`r_WT2re^E4rf$i*rcnE`rb_XJraPk5raYqArbh^W
rd"Knrf6c9re:>br_!/ArWrK'rY#3+rdt,3reLK4raGd[rXno*rYGJhr_NMsraYqDrcJ-fre:?3rfR2>
re18trcA'RraPk0r_!/BrXer,rW3!7r]'mnrfI,/r[<9
~> %APLeod
EI
74 0 0 10 67 59 cm
BI
/Width 222
/Height 30
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
n,N1[qq(g)r]cJDrr)ibro!e(rkn`Brhf[brf[8;rdXojrbVRDr`T4sr^QlMr\OO'rZM1VrXJi0iW-Oi
rW3!"rWN*&rWW9'rW/JgrW3!)rY#2Mr[%Osr]'mDr_*5jra,S;rc.pare192rg3VXriH45])]JBb5U)n
kl1::s8Ke4!<.QEnG*%Ps7lKgfD[Z,5CrjTs8MrqpAXU]li-&GiVqU2f)F(rbQ,W``lA"ork/6=riuI(
rhf[grg`tTrg*PJrfd>Drf@&=rf$i6re^W0re:?(rdt-"rdOiprd4Nfrd+QkrdOirrdk'$re19*reUQ1
repc8rf6u>rf[8Frg!JLrgEbWrhTOmriZ7-rji$Brl"fXrm(Mlrn7;-ro="BrpKdWrqZQmao?tmrkJF4
rdjk6q#Bg_q"ss?r\a[>JcD\KJcC<$K)bhbrW)qKq!e(Yn,N1Zqpk[&r]bu6W;hGKJcC?%rkJF4rdae5
q#Bg_q"jm<r\XU=JcD\KJcC<$K)bhbrW)qJq!e(Yn,N1Zqpk[&r]bu6W;hGKJcC?%rkJF4rdae5q#Bg_
q"jm<r\XU=JcD\KJcC<$K)bhbrW)qJq!e(Yn,N1Zqpk[&r]bu6W;hGKJcC?%rkJF4rdae5q#Bg_q"jm<
r\XU=JcD\KJcC<$K)bhbrW)qJq!e(Yn,N1Zqpk[&r]bu6W;hGKJcC?%rkJF4rdae5q#Bg_q"jm<r\XU=
JcD\KJcC<$K)bhbrW)qJq!e(Yn,N1Zqpk[&r]bu6W;hGKJcC?%rkJF4rdae5q#Bg_q"jm<r\OO;JcD\K
JcC<$K)bhbrW)qIq!e(Yn,N1ZqpkZ_r\T3+W;hGKJcC?%riuG+rc@l(q#Bg_q"jm<rZD+>rbMN'JcDnQ
JcC<$L&_.arZ1t@rdFS2q#Bg_q"ssDrfmBorW3!+ral)Lrr.KK\,V$ZJcCc1rpKcOr\FHQrX8][ri>ha
q#Bg_q"sjArgs+Fr^?_krW)p3r`T5lrnW/*_#JucJcD2=rq-3*rd=]'rW<'!rZM2Jril:+q!n.Zn,N1[
ptYY9re^V_r\j`cqZ-U,r^Qm6riQ1Orqh9Hdf4muJcD_Lrp9X$rg!Ikr[RmKrW)p!rZ_>7rd+I+pp9bc
q#BLVq"=F9psf;lriZ6Nr_i_@rW2lrrWN3Lr`&lErh'2*ro3qUJcFp5JcC<$^An3(rmC_Krf6tlr]^;r
p]1:'r]C*nrg3W'qpbDlpuV;Jq#BLVq"=F9l.#^Tri#gMraPjjrYth<p]19sr[%P5raPkTrgEbnrmC`3
rr.NLJcC<$g&M'Hrnm^mrhoaRrc%j9r\aZho`4t"r[n+FrcA(*rk&0Yn'q-`puV;Jq#BLVq"=F9f@9fG
rjMfprdOiUr^Hf<rYPP8o`4snrYPPbr^-TbrbML`rg!J^rkAB\roj@YVZ25IJcG]Krpp'ErlG)Grh'1I
rcS3Kr_3;LrZV7Mnc8XsrZ_>%r_rf8rf$iTrl*U@pt#6%q"sjdh>d9I^\[s(rndXmri#gVrce?Pr_NMS
r[.UWli@"rr[%P&r^QlcraGeDrd=^%rg3V[rj)O<rltGrroj@Sg&HX'ZiC%&rpKdErmUkdrj_s.rgj%M
rdt,lrb)46r_3;Tr\"9j)?:]T#4DQk#Q>_B1&aT?=oN:;K)V5<[f4\Rm()ufrU9dBs7lJ_qYp6gjSmL)
]`+i.PQ$%1CAq957K,:G/,gUh&H2do!<*'!&,mRJ,lT@o1]BN97/fmZ;uU##A,^3CEWL3$rd+Qpre^W:
rg<\Xri#h!riuI/rjMg9rk&0CrkSNMrl+lWrlY5arm1Skrm^qurn7;*rndY3rnRM,rn%/"rmLemrltGc
rlG)Yrkn`OrkABErji$;rj;[1ric=%rhTO`rg!JBre:?"rc\9Yrau.:r`B(pr^d#Rr\sg1r[@agrYGJ=
irK&brYPPZr\FI:r_3E$?iXU6FT.-rSGoem`r=]km[3kGrU9dBs7lJBqXOF]nc%SJf)Ebi]`,)5T`12T
LAlJtC]7`@=T2.r8H(pS3W:f5/,gdm)u^NO$ipbFrWIcPjT,8\rWrK7rYPPUr[7[ur\a[<r^Hf[r`&l%
ral(Lrdb!-rgNharjDaBrm1T"rp'LWmJ;G2q#0[]JcC<$r;Zcprq??ZroX4;rn%.srm(MerlP/[rl"fQ
rkJHGrjr*=rjDa3rilC)ri?$trhf[jrh9=arhKIhri#grriQ1'rj)O1rjVm;rk/6Erk\TOrl4rYrlb;c
rm:YnrnIG4rp'LRrq`AhJcFp5JcC<$bl@\;rhTP8cN!n6rgj&?JcGWIJcFp5JcC<$bl@ZrrW)p"ro)9)
raGd+rXo/'JcG`LJcFp5JcC<$bl@Z<qZ-VFdCT<"qZ-WEJcG`LJcFp5JcC<$bl@Z<qZ-VFdCT<"qZ-WE
JcG`LJcFp5JcC<$bl@Z<qZ-VFdCT<"qZ-WEJcG`LJcFp5J,
~> %APLeod
EI
13 0 0 3 46 6 cm
BI
/Width 39
/Height 9
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
reLK8r_r[prYGJhr_WT2re\p_rf6u$r`T4_rZD+CrW)ourXo-TrfR1rrY>E]rfR1brW)q'rf@&-rbML8
r^HfBrZ_=\rYGJFrX8]0rW)p#rX&Q7rY>DNrZD+kr]pH]ral(Rrepc<rf6t!rXSp[rfR1arWE-&rXAdA
rfR1)rX\u;p]19qrYPPdr]'m@r^Hf\r_rf!r`/qnr^d#Rr]:$6rZD+Fp]19rr[Rn@rW)q$rf-nGrW)p#
rd4V\rW)p<qZm*frc%jmrh'1rdC0%PrfI,(r`&k=rW)p!rYGJErW)pQrW`@ard"JHrY,9&rh6[,rh06_
rWE-Ard"L*r`T5_re(1]r[Rnirhm35riuHVr^Zqgrabngr_*-Nrc%iOrW)our[7\Erb_Xfrg`tmg:%!g
rhKINrcJ-Fr]0r`rW)p)r_E?Qrc%i<rYti?rf-o>rd"K;rZV7Dp]19orY#2MrZhClr\=C3r]^<Br\OO)
r[%OcrYPP;o`4t+r]gBurf6u?rb_WfrW3!+rX\u.rX8]prcJ.!rfR2@rdk&dr`f@mr]'m3r[[sprZV7[
rYPPPrZD+br[Rn#r\a[Br`/r2rd4X(qiUl+r`K.=rW)p"r^HfgJ,
~> %APLeod
EI
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
623.77039 480.28183 m
628.02747 479.4541 628.02747 478.11212 623.77039 477.28442 c
619.51331 476.4567 612.61127 476.4567 608.35419 477.28442 c
604.09711 478.11212 604.09711 479.4541 608.35419 480.28183 c
612.61127 481.10953 619.51331 481.10953 623.77039 480.28183 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
96.567589 99.166588 m
99.638908 96.512627 l
100.0022 96.198708 100.13533 95.756775 99.936073 95.526184 c
99.736816 95.295593 99.280251 95.36322 98.916962 95.677147 c
95.845642 98.331108 l
95.482346 98.645035 95.34922 99.08696 95.548477 99.317551 c
95.747734 99.548149 96.2043 99.480515 96.567589 99.166588 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
600.13519 470.66681 m
606.27783 475.97473 l
607.00439 476.6026 607.27069 477.48645 606.87213 477.94763 c
606.47363 478.40881 605.56049 478.27356 604.83392 477.64572 c
598.69128 472.3378 l
597.96472 471.70993 597.69843 470.82608 598.09692 470.3649 c
598.49548 469.90372 599.40857 470.03897 600.13519 470.66681 c
S
0 i
0.49411801 0.49411801 0.49411801 sc
CM
113.65436 98.331108 m
110.58304 95.677147 l
110.21975 95.36322 109.76318 95.295593 109.56393 95.526184 c
109.36467 95.756775 109.4978 96.198708 109.86109 96.512627 c
112.93241 99.166588 l
113.2957 99.480515 113.75227 99.548149 113.95152 99.317551 c
114.15078 99.08696 114.01765 98.645035 113.65436 98.331108 c
f
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
634.30872 472.3378 m
628.16608 477.64572 l
627.43951 478.27356 626.52637 478.40881 626.12787 477.94763 c
625.72931 477.48645 625.99561 476.6026 626.72217 475.97473 c
632.86481 470.66681 l
633.59143 470.03897 634.50452 469.90372 634.90308 470.3649 c
635.30157 470.82608 635.03528 471.70993 634.30872 472.3378 c
S
0 i
0.67273003 0.67273003 0.67273003 sc
CM
101.375 107.25 m
107.99519 107.25 l
107.99519 100.82783 l
101.375 100.82783 l
h
101.375 107.25 m
f
2 w
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -203.5 334.5 cm
609.75 454.5 m
609.75 467.34433 l
622.99036 467.34433 m
622.99036 454.5 l
S
622.99036 467.34433 m
609.75 467.34433 l
S
ep
end
%%Trailer
%%EOF
%%EndDocument
 @endspecial 2114 -168 a Fj(t)s Fh(,)13 b Fj(q)25 b Fi(>)c
Fh(0)1377 65 y Fj(a)1417 80 y Ff(1)1472 65 y Fi(>)g Fh(0)526
538 y Fj(a)566 552 y Ff(2)621 538 y Fi(>)h Fh(0)2062
847 y Fg(B)2107 858 y Fd(r)2048 202 y Fg(B)2094 218 y
Fd(b)2121 227 y Fc(1)2092 344 y Fg(K)2144 360 y Fd(b)2171
369 y Fc(1)1103 533 y Fg(B)1149 549 y Fd(b)1176 558 y
Fc(2)1147 674 y Fg(K)1199 691 y Fd(b)1226 700 y Fc(2)1288
1207 y Fh(:)r Fa(=)f Fh(centre)h(of)f(mass)1310 1387
y(:)r Fa(=)h Fh(viscous)f(damper)1358 1599 y(:)r Fa(=)h
Fh(torsional)f(spring)1694 737 y(r)o(otar)q(y)g(ser)q(v)m(o)g(base)p
eop end
%%Trailer
userdict /end-hook known{end-hook}if
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
